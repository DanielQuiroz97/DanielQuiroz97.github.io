{
  "hash": "5e1eb466dd1928c44ebc42ae8ccbeaeb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: M2extract Part 1 - Introduction to MS2extract package\nauthor: Cristian Quiroz-Moreno\ndate: '2023-08-11'\n---\n\n\n\n\n## Package Installation\n\nAs of today, the [MS2extract](https://github.com/CooperstoneLab/MS2extract)\npackage can only be found at GitHub. Therefore, you can install this pacakge by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\ndevtools::install_github(\"CooperstoneLab/MS2extract\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](MS2extract_logo.png){fig-align='center' width=30% height=30%}\n:::\n:::\n\n\n## Introduction\n\nThis vignette has the objective to introduce the **MS2extract**. The\nmain goal of this package is to provide a tool to create in-house MS/MS compound\nlibraries. Users can access a specific function help through the command\nhelp(*['function name']*). It is worth to note that this package is aimed in \nthe targeted extraction of MS/MS scans and it is not able to perform compound\nmatch or annotation.\n\nA simplified workflow is presented in Figure 1. Briefly, mzMl/mzXML files are \nimported in memory, then based on metadata provided by the user such as \nanalyte chemical formula, and ionization mode,\nMS2extract computes the theoretical precursor *m*/*z*. Then, product\nion scans that matches the theoretical analyte precursor ion\nare extracted, with a given ppm tolerance.\nNext, low intensity signals, or background noise can be removed\nfrom the spectra. Finally, users can export the extracted MS/MS spectra to\na MS/MS library format (.msp/.mgf) to be used as reference library for\nfurther compound identification and annotation, or deposit the created library\nin different repositories such as GNPS, or MassBank.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure 1. Overview of the processing pipeline of MS2extract](pipeline.png){fig-align='center' width=80% height=80%}\n:::\n:::\n\n\n## Basic workflow\n\nThe workflow has four main steps:\n\n* data import, \n* extract MS/MS scans,\n* detect masses, and \n* export the MS/MS library\n\nIn this section, we will explain in a more detailed manner the main steps to\ncreate in-house MS/MS libraries, \nas well as provide information about the required and optional arguments\nthat users may need to provide in order to effectively use this package.\n\n\nAdditionally, this package also includes a set of `batch_*()` functions that\nallows to process multiple .mzXML files at once. However, more metadata is\nrequired to run this automated pipeline and the use of this `batch_*()` \nfunctions\nwill is described in the\n[Using MS2extract Batch Pipeline](https://cooperstonelab.github.io/MS2extract/articles/Busing_batch_extract.html).\n\n### Data import\n\nThis section is focused on describing how MS2extract package imports MS/MS data.\nWe also include a more detailed document about this process in the \n[Behind the curtains of importing MS/MS data](https://cooperstonelab.github.io/MS2extract/articles/Cimport_mzml_explanation.html)\nvignette.\n\nThe main import function relies on R package\n[metID](https://metid.tidymass.org). We adapted the import function in\norder to read mass spectrometry data from mzML/mzXML files. The new adaptation \nconsists in importing scans data in a list (S3 object) rather than into a S4\nobject, facilitating the downstream tidy analysis of this object.\n\n> This function execute a back-end calculation of theoretical ionized *m*/*z*\nof the compound in order to extract the precursor ions that match that mass\nwith a given ppm.\n\nThe arguments of the `import_mzxml()` functions are four:\n\n* **file:** mzML/mzXML file name \n* **met_metadata:** metadata of the analyte \n* **ppm:** error mass expressed in ppm\n* ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading the package\nlibrary(MS2extract)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in fun(libname, pkgname): mzR has been built against a different Rcpp version (1.0.10)\nthan is installed on your system (1.0.12). This might lead to errors\nwhen loading mzR. If you encounter such issues, please send a report,\nincluding the output of sessionInfo() to the Bioc support forum at \nhttps://support.bioconductor.org/. For details see also\nhttps://github.com/sneumann/mzR/wiki/mzR-Rcpp-compiler-linker-issue.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print function arg\nformals(import_mzxml)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$file\nNULL\n\n$met_metadata\nNULL\n\n$ppm\n[1] 10\n\n$...\n```\n\n\n:::\n:::\n\n\n#### file\n\nFile should contain the name of your mzML/mzXML file that contains MS/MS data\nof  authentic standards or reference material. Here, we provide an example\nfile of procyanidin A2 collected in negative ionization mode, and a collision\nenergy of 20 eV.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importing  Procyanidin A2 MS/MS spectra in negative ionization mode\n# and 20 eV as the collision energy\nProcA2_file <- system.file(\"extdata\",\n  \"ProcyanidinA2_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\n# File name\nProcA2_file\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/quirozmoreno.1/Library/R/arm64/4.3/library/MS2extract/extdata/ProcyanidinA2_neg_20eV.mzXML\"\n```\n\n\n:::\n:::\n\n\n\n#### met_metadata\n\nThis argument refers to the compound metadata that user need to provide in\norder to  properly import scans that are related to the compound of interest.\n\nThe `met_metadata` is a data frame that has required and optional columns. The\nrequired columns are employed to calculate the theoretical ionized *m*/*z* for a \ngiven formula and ionization mode. In the optional columns, we have the option\nto provide a chromatographic region of Interest (ROI),  specifying at what time\nthe  the compound elutes, in order to only keep this retention time window.\n\nThe required columns are:\n\n* **Formula:** A character string specifying the metabolite formula\n* **Ionization_mode:** The ionization mode employed in data collection. \n\nThe optional columns are: \n\n* **min_rt:** a double with the minimum retention time to keep (in seconds)\n* **max_rt:** a double with the minimum retention time to keep (in seconds)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Procyanidin A2 metadata\nProcA2_data <- data.frame(\n  Formula = \"C30H24O12\", Ionization_mode = \"Negative\",\n  min_rt = 163, max_rt = 180\n)\nProcA2_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Formula Ionization_mode min_rt max_rt\n1 C30H24O12        Negative    163    180\n```\n\n\n:::\n:::\n\n\n#### ppm\n\nppm refers to the maximum m/z deviation from the theoretical mass. A ppm of 10\nunits will mean that the total allows *m*/*z* window in 20 ppm.\nBy default, 10 ppm is used.\n\n\n#### `import_mzxml()`\n\n\nWith all arguments explained, we can use the `import_mzxml()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import Procyanidin A2 data\nProcA2_raw <- import_mzxml(ProcA2_file, met_metadata = ProcA2_data, ppm = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Processing: ProcyanidinA2_neg_20eV.mzXML\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Found 1 CE value: 20\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Remember to match CE velues in spec_metadata when exporting your library\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• m/z range given 5 ppm: 575.11663 and 575.12238\n```\n\n\n:::\n\n```{.r .cell-code}\n# 24249 rows = ions detected in all scans\ndim(ProcA2_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24249     6\n```\n\n\n:::\n:::\n\n\n\n### Extracting MS/MS spectra\n\nNow that we have the data imported, we can proceed to extract the \n**most intense MS/MS scan**.\n\nThis function computes the MS/MS total ion chromatogram (TIC) \nby summing up all intensities of the MS/MS\nscans, and selects the scan with the highest total intensity. It is worth noting\nthat we only imported MS/MS scans that the precursor ion matches the \ntheoretical *m/z* value of the compound provided in the previous step.\nTherefore, it is more accurrate to  interpret this chromatogram as \nan EIC of the precursor ion, where only the MS/MS scans are included.\n\nThis function takes three arguments:\n\n* **spec:** the imported MS/MS spectra\n* **verbose:** a boolean, if `verbose = TRUE`, the MS/MS TIC and spectra is printed, if `verbose = FALSE`, plots are not displayed\n* **out_list:** a boolean, if `out_list = TRUE`, the extracted MS/MS spectra table and plots are returned as list, otherwise only the MS/MS spectra is returned as data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nProcA2_extracted <- extract_MS2(ProcA2_raw, verbose = TRUE, out_list = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `position_stack()` requires non-overlapping x intervals\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=100% height=100%}\n:::\n:::\n\n\n\nWe generated two plots, the MS/MS EIC of the precursor ion (top plot), and the\nMS/MS spectra of the most intense MS/MS scan (bottom plot). In the MS/MS \nspectra, the blue diamond is placed on top of the precursor *m/z* ion. If the\ndiamond is filled in blue, it means the precursor ion was found in the MS/MS \nfragmentation data, while a diamond that is not filled will represent that the\nprecursor ion was not found in the fragmentation data.\n\nFurthemore, we can note that the x axis in the MS/MS spectra ranges from 0 to\n1700 *m/z*. This is more related to the acquisition parameters used in data\ncallection *m/z* range: 50-1700, which creates low intensity signal that are\ncaptured and included in the resulting MS/MS spectra.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(ProcA2_extracted$mz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  100.0852 1699.0981\n```\n\n\n:::\n:::\n\n\n\nThe range of the MS/MS *m*/*z* values are from 100 to 1699 *m*/*z*, but \nintensities are too low to be seen in the plot.\n\n### Detecting masses\n\nSimilarly to the [MZmine pipeline]( http://mzmine.github.io/), \ndetecting masses refers to setting a signal intensity threshold that MS/MS ions\nhas to meet to be kept in the data, while signals that do not meet the defined\nthreshold are removed.  This function can also normalize the spectra ion \nintensity to percentage  based on the base peak. This is a filtering step \nthat is based  on percentage of the base peak (most intense ion).\n\nThe three required arguments are:\n\n* **spec:** a data frame containing the MS/MS spectra.\n* **normalize:** a boolean indicating if the MS/MS spectra is normalized by the base peak before proceeding to filter out low intensity signals (normalize  = TRUE), if normalize = FALSE the user has to provide the minimum ion count.\n* **min_int:** an integer referring to the minimum ion intensity. The value of *min_int* has to be in line if user decides to normalize the spectra or not. If the spectra is normalized, the *min_intensity* value is in percentage, otherwise the *min_intensity* value is expressed in ion count units.\n\nBy default, the normalization is set to `TRUE` and the minimum intensity is \nset to 1% to remove background noise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nProcA2_detected <- detect_mass(ProcA2_extracted, normalize = TRUE, min_int = 1)\n```\n:::\n\n\nWe can see now the range of m/z values and the maximum value is 576.1221 m/z.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(ProcA2_detected$mz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 125.0243 576.1221\n```\n\n\n:::\n:::\n\n\n### MS/MS spectra plot \n\nWe can proceed to plot the filtered MS/MS spectra with `plot_MS2spectra()` \nfunction. This is a ggplot2 based function; the blue diamond refers to the precursor ion.\n\nIf we take a look to the previous MS/MS plot, there is less background noise\nin this MS/MS spectra because the low intensity ions have been removed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_MS2spectra(ProcA2_detected)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `position_stack()` requires non-overlapping x intervals\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=100%}\n:::\n:::\n\n\n\n### Exporting MS/MS spectra\n\n#### NIST .msp format\n\nFinally after extracting the MS/MS spectra and removing background noise, we \ncan proceed to export the MS/MS in a NIST .msp format.\n\nFor this task, we need extra information about the compound, such as \nSMILES, COLLISIONENERGY, etc. You can find the minimum required information\nby accessing the `write_msp()` function help by running the command\n`?write_msp`.\n\nAn example of this table can be found at:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading the metadata\nmetadata_file <- system.file(\"extdata\",\n  \"msp_metadata.csv\",\n  package = \"MS2extract\"\n)\n\nmetadata <- read.csv(metadata_file)\ndplyr::glimpse(metadata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 8\n$ NAME            <chr> \"Procyanidin A2\"\n$ PRECURSORTYPE   <chr> \"[M-H]-\"\n$ FORMULA         <chr> \"C30H24O12\"\n$ INCHIKEY        <chr> \"NSEWTSAADLNHNH-LSBOWGMISA-N\"\n$ SMILES          <chr> \"C1C(C(OC2=C1C(=CC3=C2C4C(C(O3)(OC5=CC(=CC(=C45)O)O)C6…\n$ IONMODE         <chr> \"Negative\"\n$ INSTRUMENTTYPE  <chr> \"LC-ESI-QTOF\"\n$ COLLISIONENERGY <chr> \"20 eV\"\n```\n\n\n:::\n:::\n\n\n\n\n\nThe three arguments for this function are:\n\n* **spec:** a data frame containing the extracted MS/MS spectra\n* **spec_metadata:** a data frame containing the values to be including in the resulting .msp file\n* **msp_name:** a string with the name of the msp file not containing (.msp) extension\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_msp(\n  spec = ProcA2_detected,\n  spec_metadata = metadata,\n  msp_name = \"Procyanidin_A2\"\n)\n```\n:::\n\n\n\nAfter writing the msp file, you will see the following file content:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n• Filtering MS/MS scans for 20 CE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNAME: Procyanidin A2\nPRECURSORMZ: 575.11957\nPRECURSORTYPE: [M-H]-\nFORMULA: C30H24O12\nRETENTIONTIME: 2.844\nIONMODE: Negative\nCOMMENT: Spectra extracted with MS2extract R package\nINCHIKEY: NSEWTSAADLNHNH-LSBOWGMISA-N\nSMILES: C1C(C(OC2=C1C(=CC3=C2C4C(C(O3)(OC5=CC(=CC(=C45)O)O)C6=CC(=C(C=C6)O)O)O)O)C7=CC(=C(C=C7)O)O)O\nCCS: \nCOLLISIONENERGY: 20 eV\nINSTRUMENTTYPE: LC-ESI-QTOF\nNum Peaks: 38\n125.02431 10\n137.02441 3\n161.02449 2\n163.00355 3\n165.01881 2\n217.04996 2\n241.05002 2\n245.04547 2\n245.0817 2\n257.0451 2\n285.04063 62\n286.04387 4\n287.05579 7\n289.0718 48\n290.07495 3\n297.03993 4\n307.06114 2\n313.03573 2\n327.05044 7\n407.07693 16\n408.08161 2\n411.07227 9\n423.07231 53\n424.07537 5\n435.07138 3\n447.07296 5\n449.08799 51\n450.09044 6\n452.07453 15\n453.08155 7\n471.1086 2\n513.11796 2\n531.13006 2\n539.09834 22\n540.10156 3\n557.10809 5\n575.11968 100\n576.12208 13\n```\n\n\n:::\n:::\n\n\n\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] MS2extract_0.01.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0      farver_2.1.1          dplyr_1.1.4          \n [4] fastmap_1.1.1         XML_3.99-0.14         digest_0.6.33        \n [7] lifecycle_1.0.4       cluster_2.1.4         ProtGenerics_1.32.0  \n[10] magrittr_2.0.3        compiler_4.3.1        rlang_1.1.3          \n[13] tools_4.3.1           utf8_1.2.4            yaml_2.3.8           \n[16] knitr_1.45            ggsignif_0.6.4        labeling_0.4.3       \n[19] htmlwidgets_1.6.4     plyr_1.8.9            abind_1.4-5          \n[22] BiocParallel_1.34.2   withr_2.5.2           purrr_1.0.2          \n[25] BiocGenerics_0.48.1   grid_4.3.1            stats4_4.3.1         \n[28] preprocessCore_1.62.1 fansi_1.0.6           ggpubr_0.6.0         \n[31] colorspace_2.1-0      ggplot2_3.4.4         scales_1.3.0         \n[34] iterators_1.0.14      MASS_7.3-60           cli_3.6.2            \n[37] mzR_2.34.1            rmarkdown_2.25        generics_0.1.3       \n[40] Rdisop_1.60.0         tzdb_0.4.0            readxl_1.4.3         \n[43] ncdf4_1.21            affy_1.78.2           zlibbioc_1.46.0      \n[46] parallel_4.3.1        impute_1.74.1         cellranger_1.1.0     \n[49] BiocManager_1.30.22   vsn_3.68.0            vctrs_0.6.5          \n[52] jsonlite_1.8.8        carData_3.0-5         car_3.1-2            \n[55] hms_1.1.3             IRanges_2.34.1        S4Vectors_0.38.2     \n[58] MALDIquant_1.22.1     rstatix_0.7.2         ggrepel_0.9.4        \n[61] clue_0.3-65           foreach_1.5.2         limma_3.56.2         \n[64] tidyr_1.3.0           affyio_1.70.0         glue_1.7.0           \n[67] MSnbase_2.26.0        codetools_0.2-19      cowplot_1.1.1        \n[70] gtable_0.3.4          OrgMassSpecR_0.5-3    mzID_1.38.0          \n[73] munsell_0.5.0         tibble_3.2.1          pillar_1.9.0         \n[76] pcaMethods_1.92.0     htmltools_0.5.7       R6_2.5.1             \n[79] Rdpack_2.6            doParallel_1.0.17     evaluate_0.23        \n[82] lattice_0.21-8        Biobase_2.62.0        readr_2.1.4          \n[85] rbibutils_2.2.16      backports_1.4.1       broom_1.0.5          \n[88] Rcpp_1.0.12           xfun_0.41             MsCoreUtils_1.12.0   \n[91] pkgconfig_2.0.3      \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}