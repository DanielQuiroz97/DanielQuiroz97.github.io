{
  "hash": "8646c5ff72ed23dd91f7282c96598672",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: MS2extract Part 2 - Using the MS2extract batch pipeline\nauthor: Daniel Quiroz & Jessica Cooperstone\ndate: '2023-09-26'\n---\n\n\n\n\n\n\n## Introduction\n\nIn the previous tutorial \n[Introduction to MS2extract package](https://cooperstonelab.github.io/MS2extract/articles/introduction.html),\nwe described in a detailed manner the core functions of the package. If you are starting\nto use the MS2extract package with this tutorial, we encourage you to take \na look at this tutorial first.\n\nOnce you are familiar with the core workflow and functions of this\npackage, we can dive into an automated pipeline with the proposed\n`batch_*()` functions. If you find that you want to extract many MS/MS spectra \nat once, you will want to use these`batch_*()` functions\n\nThe first three main steps have a separate `batch_*()` alternative functions;\nimporting mzXML files, extracting MS/MS spectra,\nand detecting masses. However, exporting your library to a .msp file is able to\ndetect if the provided spectra comes from a single or multiple .mzXML file,\nso the same function works in both cases.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure 1. Overview of general data processing pipeline to extract MS/MS spectra using the MS2extract package](pipeline.png){fig-align='center' width=80% height=80%}\n:::\n:::\n\n\n### Batch functions\n\nWe are familiar with the arguments that the core functions accept, here in this\nsection we describe extra arguments that specific `batch_*()` functions require.\n\n### batch_import_mzxml\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(warning = FALSE)\nlibrary(MS2extract)\n#> Warning in fun(libname, pkgname): mzR has been built against a different Rcpp version (1.0.10)\n#> than is installed on your system (1.0.12). This might lead to errors\n#> when loading mzR. If you encounter such issues, please send a report,\n#> including the output of sessionInfo() to the Bioc support forum at \n#> https://support.bioconductor.org/. For details see also\n#> https://github.com/sneumann/mzR/wiki/mzR-Rcpp-compiler-linker-issue.\n```\n:::\n\n\nSimilarly to `import_mzxml()`, we need to provide compound metadata, with at \nminimum the compound name, formula, ionization mode, and optionally (but \nrecommended) the region of interest (*min_rt* and *max_rt*).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the csv file name and path\nbatch_file <- system.file(\"extdata\", \"batch_read.csv\",\n  package = \"MS2extract\"\n)\n# Read the data frame\nbatch_data <- read.csv(batch_file)\n\n# File paths for Procyanidin A2 and Rutin\nProcA2_file <- system.file(\"extdata\",\n  \"ProcyanidinA2_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\nRutin_file <- system.file(\"extdata\",\n  \"Rutin_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\n\n# Add file path - User should specified the file path -\nbatch_data$File <- c(ProcA2_file, Rutin_file)\n\n# Checking batch_data data frame\ndplyr::glimpse(batch_data)\n#> Rows: 2\n#> Columns: 7\n#> $ Name            <chr> \"Procyanidin A2\", \"Rutin\"\n#> $ Formula         <chr> \"C30H24O12\", \"C27H30O16\"\n#> $ Ionization_mode <chr> \"Negative\", \"Negative\"\n#> $ min_rt          <int> 163, 162\n#> $ max_rt          <int> 180, 171\n#> $ COLLISIONENERGY <chr> \" 20 eV\", \" 20 eV\"\n#> $ File            <chr> \"/Users/quirozmoreno.1/Library/R/arm64/4.3/library/MS2…\n```\n:::\n\n\nThe only difference between `batch_import_mzxml()` and  `import_mzxml()` \nis that  met_metadata can be more than one row. Here we are working with two \ncompounds, procyanidin A2 and rutin.\n\n\n> **Tip:** you can extract multiple compounds from the same .mzXML if they have different precursor ion *m*/*z*.\n\n> **Tip:** you can also specify multiple compounds that have the same m/z as long as they have different retention time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbatch_compounds <- batch_import_mzxml(batch_data)\n#> \n#> ── Begining batch import ───────────────────────────────────────────────────────\n#> \n#> ── -- ──\n#> \n#> • Processing: ProcyanidinA2_neg_20eV.mzXML\n#> • Found 1 CE value: 20\n#> • Remember to match CE velues in spec_metadata when exporting your library\n#> • m/z range given 10 ppm: 575.11376 and 575.12526\n#> • Compound name: Procyanidin A2. 20 eV\n#> \n#> ── -- ──\n#> \n#> • Processing: Rutin_neg_20eV.mzXML\n#> • Found 1 CE value: 20\n#> • Remember to match CE velues in spec_metadata when exporting your library\n#> • m/z range given 10 ppm: 609.14002 and 609.15221\n#> • Compound name: Rutin. 20 eV\n#> \n#> ── End batch import ────────────────────────────────────────────────────────────\n```\n:::\n\n\nThe raw mzXML data contains:\n\n* Procyanidin A2: 24249 ions\n* Rutin: 22096 ions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking dimension by compound\npurrr::map(batch_compounds, dim)\n#> $`Procyanidin A2. 20 eV`\n#> [1] 24249     6\n#> \n#> $`Rutin. 20 eV`\n#> [1] 22096     6\n```\n:::\n\n\n#### batch_extract_MS2\n\nNow that we have our data in imported, we can proceed to extract the most\nintense MS/MS scan for each compound. In this case, the `batch_extract_MS2()`\nfunctions do not have extra arguments, although most of the arguments remains\nfairly similar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use extract batch extract_MS2\nbatch_extracted <- batch_extract_MS2(batch_compounds,\n  verbose = TRUE,\n  out_list = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\nBy using `verbose = TRUE`, we can display the MS/MS TIC plot as well the raw\nMS/MS spectra.\n\n#### batch_detect_mass\n\nNow that we have the raw MS/MS spectra, we are going to remove background \nnoise/non-informative product ions\nbased on intensity. `batch_detect_mass()` has the same arguments\nthan its core analogue.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbatch_mass_detected <- batch_detect_mass(batch_extracted, # Compound list\n  normalize = TRUE, # Normalize\n  min_int = 1\n) # Minimum intensity\n\npurrr::map(batch_mass_detected, dim)\n#> $`Procyanidin A2. 20 eV`\n#> [1] 38  6\n#> \n#> $`Rutin. 20 eV`\n#> [1] 4 6\n```\n:::\n\n\n\nWe see a decrease of number of ions, 38 and 4 ions for procyanidin A2 and rutin,\nrespectively.\n\n\n##### Detected MS2 Procyanidin A2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_MS2spectra(batch_mass_detected, \"Procyanidin A2. 20 eV\")\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n##### Detected MS2 Rutin\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_MS2spectra(batch_mass_detected, \"Rutin. 20 eV\")\n```\n\n::: {.cell-output-display}\n![](unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### write_msp\n\nIn contrast with the previous batch functions, `write_msp()` is able to detect\nif the user is providing a single spectra or multiple spectra. However, the\nuser needs to provide metadata about each compound to be included in the \nresulting .msp database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading batch metadata\nmetadata_msp_file <- system.file(\"extdata\",\n  \"batch_msp_metadata.csv\",\n  package = \"MS2extract\"\n)\n\nmetadata_msp <- read.csv(metadata_msp_file)\n\ndplyr::glimpse(metadata_msp)\n#> Rows: 2\n#> Columns: 8\n#> $ NAME            <chr> \"Procyanidin A2\", \"Rutin\"\n#> $ PRECURSORTYPE   <chr> \"[M-H]-\", \"[M-H]-\"\n#> $ FORMULA         <chr> \"C30H24O12\", \"C27H30O16\"\n#> $ INCHIKEY        <chr> \"NSEWTSAADLNHNH-LSBOWGMISA-N\", \"IKGXIBQEEMLURG-NVPNHPE…\n#> $ SMILES          <chr> \"C1C(C(OC2=C1C(=CC3=C2C4C(C(O3)(OC5=CC(=CC(=C45)O)O)C6…\n#> $ IONMODE         <chr> \"Negative\", \"Negative\"\n#> $ INSTRUMENTTYPE  <chr> \"LC-ESI-QTOF\", \"LC-ESI-QTOF\"\n#> $ COLLISIONENERGY <chr> \"20 eV\", \"20 eV\"\n```\n:::\n\n\nAfter having the cleaned MS/MS spectra and the compound metadata, we can proceed\nto export them into a .msp file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_msp(\n  spec = batch_mass_detected,\n  spec_metadata = metadata_msp,\n  msp_name = \"ProcA2_Rutin_batch.msp\"\n)\n```\n:::\n\n\n\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n#> R version 4.3.1 (2023-06-16)\n#> Platform: aarch64-apple-darwin20 (64-bit)\n#> Running under: macOS Sonoma 14.3\n#> \n#> Matrix products: default\n#> BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n#> LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n#> \n#> locale:\n#> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#> \n#> time zone: America/New_York\n#> tzcode source: internal\n#> \n#> attached base packages:\n#> [1] stats     graphics  grDevices utils     datasets  methods   base     \n#> \n#> other attached packages:\n#> [1] MS2extract_0.01.0\n#> \n#> loaded via a namespace (and not attached):\n#>  [1] tidyselect_1.2.0      farver_2.1.1          dplyr_1.1.4          \n#>  [4] fastmap_1.1.1         XML_3.99-0.14         digest_0.6.33        \n#>  [7] lifecycle_1.0.4       cluster_2.1.4         ProtGenerics_1.32.0  \n#> [10] magrittr_2.0.3        compiler_4.3.1        rlang_1.1.3          \n#> [13] tools_4.3.1           utf8_1.2.4            yaml_2.3.8           \n#> [16] knitr_1.45            ggsignif_0.6.4        labeling_0.4.3       \n#> [19] htmlwidgets_1.6.4     plyr_1.8.9            abind_1.4-5          \n#> [22] BiocParallel_1.34.2   withr_2.5.2           purrr_1.0.2          \n#> [25] BiocGenerics_0.48.1   grid_4.3.1            stats4_4.3.1         \n#> [28] preprocessCore_1.62.1 fansi_1.0.6           ggpubr_0.6.0         \n#> [31] colorspace_2.1-0      ggplot2_3.4.4         scales_1.3.0         \n#> [34] iterators_1.0.14      MASS_7.3-60           cli_3.6.2            \n#> [37] mzR_2.34.1            rmarkdown_2.25        generics_0.1.3       \n#> [40] Rdisop_1.60.0         tzdb_0.4.0            readxl_1.4.3         \n#> [43] ncdf4_1.21            affy_1.78.2           zlibbioc_1.46.0      \n#> [46] parallel_4.3.1        impute_1.74.1         cellranger_1.1.0     \n#> [49] BiocManager_1.30.22   vsn_3.68.0            vctrs_0.6.5          \n#> [52] jsonlite_1.8.8        carData_3.0-5         car_3.1-2            \n#> [55] hms_1.1.3             IRanges_2.34.1        S4Vectors_0.38.2     \n#> [58] MALDIquant_1.22.1     rstatix_0.7.2         ggrepel_0.9.4        \n#> [61] clue_0.3-65           foreach_1.5.2         limma_3.56.2         \n#> [64] tidyr_1.3.0           affyio_1.70.0         glue_1.7.0           \n#> [67] MSnbase_2.26.0        codetools_0.2-19      cowplot_1.1.1        \n#> [70] gtable_0.3.4          OrgMassSpecR_0.5-3    mzID_1.38.0          \n#> [73] munsell_0.5.0         tibble_3.2.1          pillar_1.9.0         \n#> [76] pcaMethods_1.92.0     htmltools_0.5.7       R6_2.5.1             \n#> [79] Rdpack_2.6            doParallel_1.0.17     evaluate_0.23        \n#> [82] lattice_0.21-8        Biobase_2.62.0        readr_2.1.4          \n#> [85] rbibutils_2.2.16      backports_1.4.1       broom_1.0.5          \n#> [88] Rcpp_1.0.12           xfun_0.41             MsCoreUtils_1.12.0   \n#> [91] pkgconfig_2.0.3\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}