[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Omics-based Data Analysis",
    "section": "",
    "text": "I’ll be brief, this is a personal website to share documentation and useful resources about mass spec, metabolomics, and microbiome metagenomics data analysis. More information about myself, please visit the About page."
  },
  {
    "objectID": "index.html#daniel-quiroz-personal-blog",
    "href": "index.html#daniel-quiroz-personal-blog",
    "title": "Omics-based Data Analysis",
    "section": "",
    "text": "I’ll be brief, this is a personal website to share documentation and useful resources about mass spec, metabolomics, and microbiome metagenomics data analysis. More information about myself, please visit the About page."
  },
  {
    "objectID": "index.html#latest-blogs",
    "href": "index.html#latest-blogs",
    "title": "Omics-based Data Analysis",
    "section": "Latest blogs",
    "text": "Latest blogs\n\nM2extract Part 1 - Introduction to MS2extract package (Link)\nMS2extract Part 2 - Using the MS2extract batch pipeline (Link)\nMS2extract Part 3 - Behind the curtains of importing MS/MS data (Link)\nMS2extract Part 4 - Using MSconvert to filter useful MS/MS data (Link)"
  },
  {
    "objectID": "index.html#latest-publications",
    "href": "index.html#latest-publications",
    "title": "Omics-based Data Analysis",
    "section": "Latest publications",
    "text": "Latest publications\nThe most recent publications are:\n\n2024 - Jefferson V Pastuña-Fasso, Cristian Quiroz-Moreno, et al. Metabolite fingerprinting of Urospatha sagittifolia (Araceae) tubers at different growth stages by multi-platform metabolomics and molecular networking. Microchemical journal (link).\n2024 - C. Alfonso Molina, Cristian Quiroz-Moreno, et al.,Bacterial community assessment of drinking water and downstream distribution systems in highland localities of Ecuador . Journal of Water and Health (link).\n\nIf you are intersted to see the full list of publications, please visit the Abaut page."
  },
  {
    "objectID": "post/20230928_MS2extract_import/index.html",
    "href": "post/20230928_MS2extract_import/index.html",
    "title": "MS2extract Part 3 - Behind the curtains of importing MS/MS data",
    "section": "",
    "text": "The main objective of this document is to explain in a detailed manner how we import and process MS/MS when you use import_mzxml().\nThis document is organized based on the main steps we take to import MS/MS data that are:\n\nCalculating the theoretical precursor ion,\nFiltering MS/MS scans for a given precursor ion and rt range, and\nFinding the most intense MS/MS scan.",
    "crumbs": [
      "MS/MS libraries",
      "3 - MS2extract importing data"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_import/index.html#goal-of-this-vignette",
    "href": "post/20230928_MS2extract_import/index.html#goal-of-this-vignette",
    "title": "MS2extract Part 3 - Behind the curtains of importing MS/MS data",
    "section": "",
    "text": "The main objective of this document is to explain in a detailed manner how we import and process MS/MS when you use import_mzxml().\nThis document is organized based on the main steps we take to import MS/MS data that are:\n\nCalculating the theoretical precursor ion,\nFiltering MS/MS scans for a given precursor ion and rt range, and\nFinding the most intense MS/MS scan.",
    "crumbs": [
      "MS/MS libraries",
      "3 - MS2extract importing data"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_import/index.html#calculating-the-theoretical-precursor-ion",
    "href": "post/20230928_MS2extract_import/index.html#calculating-the-theoretical-precursor-ion",
    "title": "MS2extract Part 3 - Behind the curtains of importing MS/MS data",
    "section": "Calculating the theoretical precursor ion",
    "text": "Calculating the theoretical precursor ion\nOne of the main inputs, besides the .mzML data, is the met_metadata data frame used in import_mzxml(). This data frame contains the minimum information to calculate the theoretical precursor ion m/z given the following information:\n\nChemical formula,\nIonization polarity, and\nppm (mass error)\n\nThis process can be depicted in the following image.\n\nHere, we are going to use procyanidin A2 to demonstrate this process. (1) First, by using the Rdisop package, we calculate the theoretical monoisotopic mass. (2) Then, given an specific polarity (Positive or Negative), we add or subtract the mass of a proton to calculate the theoretical ion m/z. (3) Finally, we used the provided ppm value (10 ppm by default) to calculate the m/z range that will be used to filter scan that the precursor ion value falls within this range.\nYou can also calculate this ppm range with ppm_range()\n\nppm_range(mz = 575.12604, ppm = 10)\n#&gt; [1] 575.1203 575.1318",
    "crumbs": [
      "MS/MS libraries",
      "3 - MS2extract importing data"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_import/index.html#filtering-msms-scans",
    "href": "post/20230928_MS2extract_import/index.html#filtering-msms-scans",
    "title": "MS2extract Part 3 - Behind the curtains of importing MS/MS data",
    "section": "Filtering MS/MS scans",
    "text": "Filtering MS/MS scans\n\nUsing retention time region of interest\nAlthough providing a retention time window is not mandatory, it is highly suggested to provide this information to have more control over the regions of the run that we look for the MS/MS scans. If you do not provide a specific rt ROI, this package will look for the most intense scan, even if that do not represent the desired scans from the provided metabolite.\n\n\n\nFiltering using m/z range and rt ROI\nThen, after calculating the theoretical m/z range, and knowing the rt ROI, we can look in the data for the MS/MS scans that have this information.\nIf MS2extract do not find at least one MS/MS scan within the given m/z range and rt ROI, it will stop.\nIn the following example, the scan in the first row does not meet these requirements, and it is discarded, while the second and third scan falls within these requirements, and are kept for the next steps.",
    "crumbs": [
      "MS/MS libraries",
      "3 - MS2extract importing data"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_tips/index.html",
    "href": "post/20230928_MS2extract_tips/index.html",
    "title": "MS2extract Part 4 - Using MSconvert to filter useful MS/MS data",
    "section": "",
    "text": "In this document, you will find more information describing multiple scenarios about how to use MSconvert in order to transform your raw MS/MS data to .mzMl or mzXML format in order to be imported with MS2extract.\nHere, we will explore three different scenarios that you might find useful depending on your MS/MS data collection approach. The explained scenarios are:\n\nConverting to .mzML the entire run,\nTrimming for specific retention time, and\nExtracting MS/MS scans of multiples CE from the same run\n\n*Note:* this is the fourth vignette for this package and if you find some terms unclear, or are not familiar with the concepts, please visit the previous vignettes (Package introduction, Batch mode introduction, and Importing MS/MS data).",
    "crumbs": [
      "MS/MS libraries",
      "4 - MS2extract extra tips"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_tips/index.html#goal-of-this-document",
    "href": "post/20230928_MS2extract_tips/index.html#goal-of-this-document",
    "title": "MS2extract Part 4 - Using MSconvert to filter useful MS/MS data",
    "section": "",
    "text": "In this document, you will find more information describing multiple scenarios about how to use MSconvert in order to transform your raw MS/MS data to .mzMl or mzXML format in order to be imported with MS2extract.\nHere, we will explore three different scenarios that you might find useful depending on your MS/MS data collection approach. The explained scenarios are:\n\nConverting to .mzML the entire run,\nTrimming for specific retention time, and\nExtracting MS/MS scans of multiples CE from the same run\n\n*Note:* this is the fourth vignette for this package and if you find some terms unclear, or are not familiar with the concepts, please visit the previous vignettes (Package introduction, Batch mode introduction, and Importing MS/MS data).",
    "crumbs": [
      "MS/MS libraries",
      "4 - MS2extract extra tips"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_tips/index.html#case-1-converting-to-.mzml-the-entire-run",
    "href": "post/20230928_MS2extract_tips/index.html#case-1-converting-to-.mzml-the-entire-run",
    "title": "MS2extract Part 4 - Using MSconvert to filter useful MS/MS data",
    "section": "Case 1: Converting to .mzML the entire run",
    "text": "Case 1: Converting to .mzML the entire run\nIn this case, although is not the optimal approach, it will get the job done, if your data meets a requirement.\n\nRequirement: the precursor ion of your standard has to produce the most intense MS/MS signal in the entire run.\n\n\nRequirement: If you have isomers in the same run, but they elute at different retention times, you must provide different retention times windows.\n\nSince MS2extract searches for the most intense MS/MS scan, you can only have one metabolite per run if you do not provide different retention time windows.\nSince this package only works with MS/MS data, we are only going to keep scans with MS/MS data. Therefore, the MSconvert filters are:\n\n\n\nFilter\nParameters\n\n\n\n\npeakPicking\nvendor msLevel=2-2\n\n\nmsLevel\n2-2",
    "crumbs": [
      "MS/MS libraries",
      "4 - MS2extract extra tips"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_tips/index.html#case-2-trimming-for-specific-retention-time",
    "href": "post/20230928_MS2extract_tips/index.html#case-2-trimming-for-specific-retention-time",
    "title": "MS2extract Part 4 - Using MSconvert to filter useful MS/MS data",
    "section": "Case 2: Trimming for specific retention time",
    "text": "Case 2: Trimming for specific retention time\nThis is probably the most efficient approach to convert your raw data files, since you already know the retention time of your metabolite. Then, you can use the scanTime filter. Remember, scan time has to be converted to seconds, not minutes.\nWe used this approach to build the entire PhenolicsDB repository, where you can find the retention time window for each metabolite.\n\n\n\nFilter\nParameters\n\n\n\n\npeakPicking\nvendor msLevel=2-2\n\n\nmsLevel\n2-2\n\n\nscanTime\n[min rt, max rt]\n\n\n\nIn the following example, we are using the procyanidin B2 standard data, with a elution time of 138 (s), and the minimum and maximum retention time are 133 and 145 (s), respectively. Therefore, the MSconvert task will look like the following image.",
    "crumbs": [
      "MS/MS libraries",
      "4 - MS2extract extra tips"
    ]
  },
  {
    "objectID": "post/20230928_MS2extract_tips/index.html#case-3-multiple-ce-in-the-same-run",
    "href": "post/20230928_MS2extract_tips/index.html#case-3-multiple-ce-in-the-same-run",
    "title": "MS2extract Part 4 - Using MSconvert to filter useful MS/MS data",
    "section": "Case 3: Multiple CE in the same run",
    "text": "Case 3: Multiple CE in the same run\nUnfortunately, the current version of MS2extract does not support importing MS/MS data with different CE in the same run. Then, the user will need to manually separate different CE in different files as it is explained below.\nFor this example, we are going to use guaijaverin (quercetin 3-arabinopyranoside) to exemplify this case. In the following image, you can see the EIC of this metabolite in negative polarity. Then, the first MS/MS spectra refers to the fragmentation pattern at 60 eV, while the second MS/MS spectra refers to 80 eV.\n\nNow, in order to separate scans in MSconvert we need to specify one CE at a time. Here, you can see that we are using the collisionEnergy filter to subset MS/MS scans with a CE of 60 eV. Then, the filters for this metabolite will be:\n\n\n\nFilter\nParameters\n\n\n\n\npeakPicking\nvendor msLevel=2-2\n\n\nmsLevel\n2-2\n\n\nscanTime\n[min rt, max rt]\n\n\ncollisionEnergy\nlow=60 high=60\n\n\n\n\nOnce you convert this raw data file to mzML at 60 eV, you can change the collision energy to a different value and then convert for the rest of available CE values. The same principle can be applied for MS/MS data with multiple polarities in the same run.\n\nNote: remember to change the .mzml file name as it will overwrite the file with the new CE value.",
    "crumbs": [
      "MS/MS libraries",
      "4 - MS2extract extra tips"
    ]
  },
  {
    "objectID": "post/20231016_MirrorPlot/index.html",
    "href": "post/20231016_MirrorPlot/index.html",
    "title": "Making publication-ready MS/MS mirror plots",
    "section": "",
    "text": "This post is a step-by-step tutorial about how to create publication-ready mirror plots to show the similarities, or differences between an experimental and reference MS/MS spectra.\nThis post will assume you have two MS/MS spectra you’d like to compare. This will most often be an experimental spectrum you’ve collected, and a reference spectrum from a standard or database. By the end of this post, you will be familiar with data visualization techniques needed to create and customize MS/MS mirror plots. Some examples of final plots are below:\nExperimental vs. Analytical standard spectrum\n\n\n\nExperimental vs. literature spectrum\n\n\n\nDisclaimer\n\nThis post will not cover metabolite identification approaches.\n\nThere is a lot of material about approaches for metabolite identification , and we encourage to visit these references if you are not familiar with this topic.\nHere is the list of few places that you can visit to get familiar with metabolite ID.\n\nGNPS documentation\nGNPS tutorial videos\nMS-DIAL/MS-FINDER tutorials",
    "crumbs": [
      "Analysis and visualization",
      "Creating MS/MS mirror plots"
    ]
  },
  {
    "objectID": "post/20231016_MirrorPlot/index.html#goal-of-this-document",
    "href": "post/20231016_MirrorPlot/index.html#goal-of-this-document",
    "title": "Making publication-ready MS/MS mirror plots",
    "section": "",
    "text": "This post is a step-by-step tutorial about how to create publication-ready mirror plots to show the similarities, or differences between an experimental and reference MS/MS spectra.\nThis post will assume you have two MS/MS spectra you’d like to compare. This will most often be an experimental spectrum you’ve collected, and a reference spectrum from a standard or database. By the end of this post, you will be familiar with data visualization techniques needed to create and customize MS/MS mirror plots. Some examples of final plots are below:\nExperimental vs. Analytical standard spectrum\n\n\n\nExperimental vs. literature spectrum\n\n\n\nDisclaimer\n\nThis post will not cover metabolite identification approaches.\n\nThere is a lot of material about approaches for metabolite identification , and we encourage to visit these references if you are not familiar with this topic.\nHere is the list of few places that you can visit to get familiar with metabolite ID.\n\nGNPS documentation\nGNPS tutorial videos\nMS-DIAL/MS-FINDER tutorials",
    "crumbs": [
      "Analysis and visualization",
      "Creating MS/MS mirror plots"
    ]
  },
  {
    "objectID": "post/20231016_MirrorPlot/index.html#introduction",
    "href": "post/20231016_MirrorPlot/index.html#introduction",
    "title": "Making publication-ready MS/MS mirror plots",
    "section": "Introduction",
    "text": "Introduction\nMetabolite identification from untargeted mass spectrometry based metabolomics data can be conducted by using different platforms and approaches. The gold standard is comparing the m/z and retention time of a peak in your sample to that of an authentic standard. However, given that often this type of matching is impossible or impractical, another commonly usedapproach is comparing the MS/MS fragmentation pattern of your experimental data against a reference spectrum. This reference spectrum could come from difference sources. In the best case scenario, you would have a reference material (analytical standard), and you will be able to collect MS/MS data of this material. Another option is using public or licensed MS/MS libraries.\nAlthough the concept of comparing the fragmentation patterns of the experimental spectrum against a reference spectra sounds fairly easy, this task is not trivial, as mathematical methods to quantify the similarity between two vectors or matrices are needed. There is a great read for in this topic that you can direct your attention if you are interested in this topic Niek F. de Jonge et al. 2022.\nOnce you have successfully processed your MS/MS data and have found or collected an MS/MS spectrum that you think matches your compound, you can make a figure that compares those spectra together so others can evaluate their similarity. The first step though is to gather your MS/MS data.",
    "crumbs": [
      "Analysis and visualization",
      "Creating MS/MS mirror plots"
    ]
  },
  {
    "objectID": "post/20231016_MirrorPlot/index.html#gathering-msms-data",
    "href": "post/20231016_MirrorPlot/index.html#gathering-msms-data",
    "title": "Making publication-ready MS/MS mirror plots",
    "section": "Gathering MS/MS data",
    "text": "Gathering MS/MS data\nThis section aims to briefly explain how to extract MS/MS data from your raw files to create a table of m/z values and ion intensities to create the mirror plot. If you already have these data, you can jump to the next section.\nHere, I will explain how we extracted the tables containing m/z values and ion intensities for making the mirror plots. If you want to replicate these plots, you can download these tables.\n\nNictoflorin example data\nIsoschaftoside example data\n\n\nExperimental\nThe experimental MS/MS spectrum comes from you data. Either form the raw MS/MS files, or from the deconvoluted MS/MS peaks.\nHere is an example how we used MZmine3 to extract the m/z and ion intensity table from the nictoflorin standard. If you want to download the raw nictolorin .mzml file, you can find it in the PhenolicsDB at this link\nOnce you load your data in MZmine3, you need to select the MS/MS scan that has the desired MS/MS data. Then, in the MS/MS plot panel, you can right-click and export this spectrum to an excel file that we are going to use later.\nYou can use the same process to extract the data from your experimental files.\n\n\n\n\n\nLiterature spectra\nYou need to find the repository or have access to the MS/MS ion peak list of the literature spectrum. In this case, our literature spectrum matches to isoschaftoside from MassBank, with the accession number MSBNK-Fiocruz-FIO00727.\nHere, you can simply copy the m/z and intensity values to an excel file, or any file as long as you have these to pieces of information.",
    "crumbs": [
      "Analysis and visualization",
      "Creating MS/MS mirror plots"
    ]
  },
  {
    "objectID": "post/20231016_MirrorPlot/index.html#data-wrangling",
    "href": "post/20231016_MirrorPlot/index.html#data-wrangling",
    "title": "Making publication-ready MS/MS mirror plots",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nLoading libraries\nHere, we are going to list and load all R libraries needed to create the mirror plots.\n\nlibrary(tidyverse) # Data wrangling and plotting\nlibrary(readxl) # Importing excel data\nlibrary(ggrepel) # Overlapping labels\nlibrary(cowplot) # Inserting chemical structure\nlibrary(magick) # Importing images in tiff format\n\n\n\nImporting MS/MS data\nAs we mentioned earlier, we are going to work with two examples, the mirror plot for isoschaftoside and in a next post we will cover the example of the nictoflorin mirror plot. While the mirror plot of isoschaftoside reflects example of a match to a literature spectrum, the nictoflorin mirror plot is an example of a math to an analytical standard spectrum.\nWe are going to show how to create the mirror plot of isoschaftoside first, as it does not have ions with super close m/z values that we need to label, which requires extra work.\nBoth provided excel files has three columns:\n\nmz: m/z values\nintensity: ion signal intensity\nGroup: refers if the signal is from the experimental or reference spectrum\n\n\n# Isoschaftoside data\nisoschaftoside_data &lt;- readxl::read_excel(\"data/Isoschaftoside.xlsx\", sheet = 1)\nglimpse(isoschaftoside_data[seq(3), ])\n#&gt; Rows: 3\n#&gt; Columns: 3\n#&gt; $ mz        &lt;chr&gt; \"  191.034100 \", \"  221.045900 \", \"  233.045100 \"\n#&gt; $ intensity &lt;chr&gt; \"326.000000 \", \"277.000000 \", \"252.000000 \"\n#&gt; $ Group     &lt;chr&gt; \"Standard\", \"Standard\", \"Standard\"\n\nWe can note that the mz columns was imported as character and not as number. It is because there are empty characters that prevents R to import this colum as character. The solution is to use the parse_number() function.\n\nisoschaftoside_data &lt;- isoschaftoside_data %&gt;% \n  mutate(intensity = parse_number(intensity), # Correcting numeric values\n         mz = parse_number(mz))\n\nglimpse(isoschaftoside_data)\n#&gt; Rows: 660\n#&gt; Columns: 3\n#&gt; $ mz        &lt;dbl&gt; 191.0341, 221.0459, 233.0451, 282.0529, 283.0603, 295.0601, …\n#&gt; $ intensity &lt;dbl&gt; 326, 277, 252, 324, 305, 368, 1454, 2380, 389, 397, 308, 150…\n#&gt; $ Group     &lt;chr&gt; \"Standard\", \"Standard\", \"Standard\", \"Standard\", \"Standard\", …\n\nWe can see the mz and intensity column are properly format as dbl, or a numeric variable. Now, we are going to create two groups in this dataset, as we have the ions from the experimental and reference spectrum.\n\nisoschaftoside_data &lt;- isoschaftoside_data %&gt;% \n  group_by(Group) # Grouping by standard and sample\n\nglimpse(isoschaftoside_data)\n#&gt; Rows: 660\n#&gt; Columns: 3\n#&gt; Groups: Group [2]\n#&gt; $ mz        &lt;dbl&gt; 191.0341, 221.0459, 233.0451, 282.0529, 283.0603, 295.0601, …\n#&gt; $ intensity &lt;dbl&gt; 326, 277, 252, 324, 305, 368, 1454, 2380, 389, 397, 308, 150…\n#&gt; $ Group     &lt;chr&gt; \"Standard\", \"Standard\", \"Standard\", \"Standard\", \"Standard\", …\n\nAt the top of the output we can see that two groups were created, the standard and sample group.\n\n\nRelative abundance calculation\nSince the ion abundance of both spectra are in ion counts (i.e., raw abundance), and the scale of the experimental and standard data are different, we need to calculate the relative abundance, that can be calculated by dividing each intensity by the max intensity, times 100. This will allow us to compare spectra that have different raw intensities.\nWe can implement this using the code below:\n\n\nisoschaftoside_data &lt;- isoschaftoside_data %&gt;% \n   mutate(Rel_int = intensity/max(intensity)*100) # Relative abundance calc\n\n# Printing ion abundance greater than 50%\nisoschaftoside_data %&gt;% filter(Rel_int &gt; 50) \n#&gt; # A tibble: 4 × 4\n#&gt; # Groups:   Group [2]\n#&gt;      mz intensity Group    Rel_int\n#&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n#&gt; 1  353.     25145 Standard   100  \n#&gt; 2  383.     22453 Standard    89.3\n#&gt; 3  353.     19000 Sample     100  \n#&gt; 4  383.     15000 Sample      78.9\n\nFor example, this table shows the ions that has a greater relative abundance than 50%.\nWe can also print how many ions are found in both the sample and the standard.\n\nisoschaftoside_data %&gt;% count() # Counting number ions per group\n#&gt; # A tibble: 2 × 2\n#&gt; # Groups:   Group [2]\n#&gt;   Group        n\n#&gt;   &lt;chr&gt;    &lt;int&gt;\n#&gt; 1 Sample     605\n#&gt; 2 Standard    55\n\nUntil this point, the sample (experimental) and the standard peak list have 605 and 55 ions, respectively. The larger number of ions in sample is attributed to the fact that this spectra was not processed to remove low intensity signals.\n\n\nFiltering low abundance ions\nWe can process our data to remove ions with low abundance. In our case, we are going to remove signals below 1.2% intensity, and ions less than 280 m/z. The first criterion aims to remove low signal ions that are the product of background noise. We are also removing ions less than 280 m/z as reference spectra do not show any signal below this m/z value.\nNote from authors: With programming you can handle/manipulate your data in an unlimited ways, so please be honest and report precisely how you process your data.\n\nisoschaftoside_data &lt;- isoschaftoside_data %&gt;% \n  filter(Rel_int &gt; 1.2) %&gt;%  # Removing signal less than 1.2% intensity\n  filter(mz &gt; 280) # Removing ions below 280 m/z\n  \nisoschaftoside_data %&gt;% count()\n#&gt; # A tibble: 2 × 2\n#&gt; # Groups:   Group [2]\n#&gt;   Group        n\n#&gt;   &lt;chr&gt;    &lt;int&gt;\n#&gt; 1 Sample      42\n#&gt; 2 Standard    50\n\nWith the final spectra processing approach, we had a final number of ions of 42 and 50 ions for the sample and standard spectra, respectively.\n\n\nNegative intensities for the reference spectrum\nIf we recall the peak table, both, the experimental and the reference spectra have positive values. The core concept of mirror plot is that the reference spectra has negative intensity values, which will be plotted as the mirror plot of the experimental spectrum.\n\nisoschaftoside_data %&gt;% filter(Rel_int &gt; 50) \n#&gt; # A tibble: 4 × 4\n#&gt; # Groups:   Group [2]\n#&gt;      mz intensity Group    Rel_int\n#&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n#&gt; 1  353.     25145 Standard   100  \n#&gt; 2  383.     22453 Standard    89.3\n#&gt; 3  353.     19000 Sample     100  \n#&gt; 4  383.     15000 Sample      78.9\n\nTherefore, we need to make the intensity values of the reference spectrum to be negative.\n\n# Changing standard intensity values to negative\n# We eval the match of signals to belong to the standard groups, and\n# multiply the intensity value time -1\n\nisoschaftoside_data &lt;- isoschaftoside_data %&gt;% ungroup %&gt;% \n  mutate(Rel_int = ifelse(Group %in% \"Standard\",\n                          Rel_int*-1, Rel_int))\n\nisoschaftoside_data %&gt;% filter(Rel_int &gt; 50 | Rel_int &lt; -50) \n#&gt; # A tibble: 4 × 4\n#&gt;      mz intensity Group    Rel_int\n#&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n#&gt; 1  353.     25145 Standard  -100  \n#&gt; 2  383.     22453 Standard   -89.3\n#&gt; 3  353.     19000 Sample     100  \n#&gt; 4  383.     15000 Sample      78.9\n\nNow, we can see that the intensity values from the standard are negative while the sample remain positive.\nAt this point, we finally have the data ready for plotting.",
    "crumbs": [
      "Analysis and visualization",
      "Creating MS/MS mirror plots"
    ]
  },
  {
    "objectID": "post/20231016_MirrorPlot/index.html#plotting-a-mirror-plot",
    "href": "post/20231016_MirrorPlot/index.html#plotting-a-mirror-plot",
    "title": "Making publication-ready MS/MS mirror plots",
    "section": "Plotting a mirror plot",
    "text": "Plotting a mirror plot\n\nBackbone plot\nThe backbone of a mirror plot is a barchart. Therefore, we are going to use this geometry for this purpose geom_col().\n\nisos_mirror &lt;- isoschaftoside_data %&gt;% \n  ggplot(aes(mz, Rel_int,  fill = Group)) +\n  geom_col(width = 0.6) \n\nisos_mirror\n\n\n\n\n\n\n\n\nThis is the backbone of our plot, now we are going to work to make it look nicer.\n\n\nChanging group colors\nBased on the GNPS mirror plot colors, we are going to change to a black color for the experimental MS/MS, while the reference spectra will be green.\n\nisos_mirror &lt;- isos_mirror + \n  scale_fill_manual(values = c(Sample = \"#000000\", Standard = \"#4B9C15\"))\nisos_mirror\n\n\n\n\n\n\n\n\n\n\nBackground color and grids\nThe gray background is the default color in ggplot, but we can change this color to white, remove the grids, and remove the repetitive legend.\n\nisos_mirror &lt;- isos_mirror + \n  theme_light() + # Using a white background theme\n  theme(legend.position = \"none\", # Removing legend\n        panel.grid.major = element_blank(),  # Removing grins\n        panel.grid.minor = element_blank()) \n\nisos_mirror\n\n\n\n\n\n\n\n\nWe have a cleaner plot, but the axis labels need to be altered, and a title added.\n\n\nChanging labels\n\nisos_mirror &lt;- isos_mirror + \n  labs(x = \"m/z\", # X axis label\n       y = \"Relative intensity (%)\", # Y axis label\n       title = \"Isoschaftoside [M-H]-\")# Title label\nisos_mirror\n\n\n\n\n\n\n\n\n\n\nAxis limits\nThe mirror plot is looking more like to the mirror plot we showed at the top of this post. Next, lets set the x and y axis limits to make room for the additional labels.\n\n# Text annotation coordinates\nannotation_text &lt;- data.frame(\n  x = c(170, 160),\n  y = c(140, -140),\n  label = c(\"Experimental spectrum 40 eV\",\n            \"Literature spectrum 50 eV\"),\n  Group = c(\"Sample\", \"Standard\")\n)\n\nisos_mirror &lt;- isos_mirror + \n   ylim(c(-140, 140)) + # Y axis limit\n  xlim(c(100, 560)) + # X axis limit\n  geom_text(data = annotation_text, \n            aes(x = x, y = y, label = label)) \nisos_mirror\n\n\n\n\n\n\n\n\n\n\nAdding labels\nNext, we can proceed to add the labels for the m/z for the most intense ions. Here, you can take multiple approaches as what ions you want to label. For example, in the case of the isoschaftoside mirror plot, we are going to use only the ions with a relative abundance greater than 10%. On the other hand, in the case of nictoflorin, we are going to use the same 10% cutoff, and we are going to add the precursor ion.e the same 10% cutoff, but we are going to add the precursor ion.\n\nExperimental spectrum lables\n\n# Filtering ions in experimental spectrum\nisos_labs_pos &lt;- isoschaftoside_data %&gt;%\n  filter( Rel_int &gt; 10 ) \n\nisos_mirror &lt;- isos_mirror + \n  geom_text(data = isos_labs_pos,\n            aes(label = abs(round(mz,3)), # Round label to 3 decimal digits\n                y = Rel_int),\n            size = 3, # Label size \n            angle = 90, # Rotate label 90 degree\n            hjust = -0.1)  # Place after the max intensity\n\nisos_mirror\n\n\n\n\n\n\n\n\n\n\nReference spectra lables\nFinally, we need to add the labels in the reference spectrum.\n\n# Filtering ions in the reference spectrum\nisos_labs_neg &lt;- isoschaftoside_data %&gt;%\n  filter( Rel_int &lt; -10  ) \n\nisos_mirror &lt;- isos_mirror +\n  geom_text(data = isos_labs_neg, aes(label = abs(round(mz,3)),\n                                      y = Rel_int),\n            size = 3, angle = 90, hjust = 1, vjust = 1, color = \"#4B9C15\")\nisos_mirror\n\n\n\n\n\n\n\n\nAt this point, you almost have a final mirror plot. The final (optional) step is to add the chemical structure of the metabolite.\n\n\n\nInserting the chemical structure\nYou have couple of options for this task. By far, the easiest is to create or get the chemical structure of the metabolite in a different software (e.g., ChemDraw) and use an image processing software to join the mirror plot and the chemical structure in a final figure.\nThere are some online options to create/draw your chemical structure such as MolView, PubChem Sketcher, and Chemical Sketch. We used ChemDraw for its flexibility in the structure manipulation and because our University has an institutional subscription (so its free for us), but overall, for the option to export the chemical structure as .pdf or .svg that we can use with more flexibility later in the process of image processing.\nFor this example, we are providing the .tiff chemical structure that we exported using chemdraw:\n\nisoschaftoside structure\nnictoflorin structure\n\nFirst, we need to import image, and then we add the image on top of the mirror plot.\n\nisos_structure &lt;- image_read(\"img/Isoschaftoside_structure.tiff\") \n\n# Use cowplot funcition and use isos_mirror as base plot\nisos_mirror_final &lt;- ggdraw(isos_mirror) + \n  draw_image(isos_structure, \n             x = -0.2, # Relative x position\n             y = 0, # Relative y position\n             scale = 0.4)  # Scaling to fit in the mirror plot\nisos_mirror_final\n\n\n\n\n\n\n\n\nFinally, you can export your publication-ready mirror plot having control over the image size, and resolution with ggsave(). You can set parameters based on your needs, but here it is an example of what we used here.\n\n# svg format\nggsave(plot =  isos_mirror_final, filename = \"nictoflorin_mirror.svg\",\n       dpi = 300) # Resolution\n\n# pdf format\nggsave(plot =  isos_mirror_final, filename = \"nictoflorin_mirror.pdf\",\n       dpi = 300, # resolution\n       width = 4, height = 2, units = \"cm\", # image size\n       scale = 5) # image scale\n\nIf you reached this point of the document, you reached the end of this tutorial. Please, let us know if this tutorial was useful and your feedback by clicking the email icon at the button of this page.",
    "crumbs": [
      "Analysis and visualization",
      "Creating MS/MS mirror plots"
    ]
  },
  {
    "objectID": "post/20230925_msmint_apple/index.html",
    "href": "post/20230925_msmint_apple/index.html",
    "title": "Using ms-mint for targeted peak integration of Mass Spec data",
    "section": "",
    "text": "Goal of this notebook\nThis notebook has the objective to exemplify the use of targeted integration of phytochemicals that are present in untargeted metabolomics data of apple fruit reported in Bilbrey et al. (2022)\nIn this case, we are going to use only the quality control (QC) samples.",
    "crumbs": [
      "Analysis and visualization",
      "HRMS targeted peak deconvolution"
    ]
  },
  {
    "objectID": "post/20230925_msmint_apple/index.html#importing-python-libraries",
    "href": "post/20230925_msmint_apple/index.html#importing-python-libraries",
    "title": "Using ms-mint for targeted peak integration of Mass Spec data",
    "section": "Importing python libraries",
    "text": "Importing python libraries\nImporting python libraries\nIn this section, we will upload the required libraries in order to targeted integrate a series of phytochemicals found in apples fruits. The main library for this purpose is ms-mint which allows to integrate ions of interest. In our case, each ion of interest refers to a specific phytochemical. For example, chlorogenic acid with a monoisotopic mass of 354.0950 Da. Thus, the ion in positive ionization mode will be 355.1023 m/z, while an ion of 353.0877 m/z corresponds to negative ionization.\n# ms-mint: Instance for MS spectrometry data\nfrom ms_mint.Mint import Mint\nimport pandas as pd # Data wrangling\nimport numpy as np\nimport re # Regular expressions\nimport glob # listing files\nimport seaborn as sns\nimport plotly.express as px # Interactive plots\nimport pickle # Export python object\n#from ms_mint.notebook import Mint\nmint = Mint()",
    "crumbs": [
      "Analysis and visualization",
      "HRMS targeted peak deconvolution"
    ]
  },
  {
    "objectID": "post/20230925_msmint_apple/index.html#selecting-qcs-files",
    "href": "post/20230925_msmint_apple/index.html#selecting-qcs-files",
    "title": "Using ms-mint for targeted peak integration of Mass Spec data",
    "section": "Selecting QCs files",
    "text": "Selecting QCs files\n\nNegative ionization\nHere, we are going to select all QC files, and we are printing the first 5 QC files.\nQC_files_neg = glob.glob(\"Data/mzML/Neg/QC*\")\nmint.ms_files = QC_files_neg\nmint.ms_files[0:5]\n\n['Data/mzML/Neg/QC_035.mzML',\n 'Data/mzML/Neg/QC_189.mzML',\n 'Data/mzML/Neg/QC_042.mzML',\n 'Data/mzML/Neg/QC_014.mzML',\n 'Data/mzML/Neg/QC_147.mzML']\n\n\nTarget ion list\ntarget_list_neg = pd.read_excel(\"Data/Tables/targets.xlsx\", sheet_name = \"target_neg\")\nmint.targets = target_list_neg\nmint.targets\n\nDT::datatable(target_neg)\n\n\n\n\n\n\n\nRunning targeted integration\nmint.run(fn = 'Results/Neg/raw_integration.csv')\n&lt;ms_mint.Mint.Mint at 0x109083610&gt;\nmint.plot.peak_shapes(col_wrap=3)",
    "crumbs": [
      "Analysis and visualization",
      "HRMS targeted peak deconvolution"
    ]
  },
  {
    "objectID": "post/20230925_msmint_apple/index.html#positive-ionization",
    "href": "post/20230925_msmint_apple/index.html#positive-ionization",
    "title": "Using ms-mint for targeted peak integration of Mass Spec data",
    "section": "Positive ionization",
    "text": "Positive ionization\nOn the other side of the ionization polarity, for positive ionization, we proceed with the same workflow; describing the QCs files first, and uploading the target list second.\n['Data/mzML/Pos/QC_035.mzML',\n 'Data/mzML/Pos/QC_189.mzML',\n 'Data/mzML/Pos/QC_014.mzML',\n 'Data/mzML/Pos/QC_147.mzML',\n 'Data/mzML/Pos/QC_203.mzML']\n\nLoading targets\ntargets_pos = pd.read_excel(\"Data/Tables/targets.xlsx\", sheet_name = \"target_pos\")\nmint.targets = targets_pos\nmint.targets\n\nDT::datatable(target_pos)\n\n\n\n\n\n\n\nRunning targeted extraction\nmint.run(fn = 'Results/Pos/raw_integration.csv')\n&lt;ms_mint.Mint.Mint at 0x109083610&gt;\nmint.plot.peak_shapes(col_wrap=3)",
    "crumbs": [
      "Analysis and visualization",
      "HRMS targeted peak deconvolution"
    ]
  },
  {
    "objectID": "post/about.html",
    "href": "post/about.html",
    "title": "Daniel Quiroz",
    "section": "",
    "text": "Greetings! I’m a dedicated PhD candidate at the Cooperstone Lab within The Ohio State University, where my passion lies in the fascinating intersection of metabolomics and genomics. My doctoral journey revolves around unraveling the genomic regions orchestrating the expression of phytochemicals—a mission that fuels my curiosity and intellectual drive."
  },
  {
    "objectID": "post/about.html#about-me",
    "href": "post/about.html#about-me",
    "title": "Daniel Quiroz",
    "section": "",
    "text": "Greetings! I’m a dedicated PhD candidate at the Cooperstone Lab within The Ohio State University, where my passion lies in the fascinating intersection of metabolomics and genomics. My doctoral journey revolves around unraveling the genomic regions orchestrating the expression of phytochemicals—a mission that fuels my curiosity and intellectual drive."
  },
  {
    "objectID": "post/about.html#software-development",
    "href": "post/about.html#software-development",
    "title": "Daniel Quiroz",
    "section": "Software development",
    "text": "Software development\nMy expertise extends beyond the lab bench. I’m an enthusiastic mass spectrometry aficionado and a skilled software developer, and I’ve recently undertaken some exciting projects:\n\nMS2extract: I’ve crafted an R package designed to construct in-house MS/MS libraries, facilitating advanced mass spectrometry analyses.\nPhenolicsDB: I’ve created a specialized MS/MS database, dedicated to the intricate world of phenolic compounds.\nRGCxGC: My R package streamlines the end-to-end processing of GCxGC-MS data, simplifying complex data analysis."
  },
  {
    "objectID": "post/about.html#data-analysis",
    "href": "post/about.html#data-analysis",
    "title": "Daniel Quiroz",
    "section": "Data analysis",
    "text": "Data analysis\nTo delve into my work further, take a look at my repositories, where you’ll find examples of mass spectrometry data analysis, as well as my ventures into microbiome analysis:\n\nMass Spectrometry\n\nApple phytochemicals: Targeted peak integration of MS data of phytochemicals present in apples.\nUruspatha sagittifolia metabolomics: Exploring the metabolome of a plant with the power of stoping snake venom.\n\n\n\nMicrobiome\n\nOrnamental Floral microbiome: Metagenomics analysis of the rhizosphere of ornamental cultivars.\nMicrobiome present in Cayambe glaciar: Here, we explored the microbiome present in a tropical glacier.\nMicrobiome present in Sumaco stratovolcano: Here, we explored the microbiome present in a tropical sleeping volcano."
  },
  {
    "objectID": "post/about.html#teaching-and-mentoring",
    "href": "post/about.html#teaching-and-mentoring",
    "title": "Daniel Quiroz",
    "section": "Teaching and mentoring",
    "text": "Teaching and mentoring\nBeyond my research, I’m deeply committed to the realms of teaching and mentoring. I’m currently serving as a teaching assistant for the DataViz in R, and I find great fulfillment in guiding for the second time. Additionally, I’m a mentor within the Metabolomics Group at Ikiam University, where I’m devoted to nurturing the next generation of scientists.\nIn essence, my journey is a fusion of scientific exploration, software innovation, and the joy of passing on knowledge. If you share my passion for metabolomics, genomics, or data science, let’s connect and embark on a journey of discovery together!"
  },
  {
    "objectID": "post/about.html#recent-publications",
    "href": "post/about.html#recent-publications",
    "title": "Daniel Quiroz",
    "section": "Recent Publications",
    "text": "Recent Publications\n\n2024 - Jefferson V Pastuña-Fasso, Cristian Quiroz-Moreno, et al. Metabolite fingerprinting of Urospatha sagittifolia (Araceae) tubers at different growth stages by multi-platform metabolomics and molecular networking. Microchemical journal (link).\n2024 - C. Alfonso Molina, Cristian Quiroz-Moreno, et al.,Bacterial community assessment of drinking water and downstream distribution systems in highland localities of Ecuador . Journal of Water and Health (link).\n2023 - Magdalena Dias, Pablo Monfort-Lanzas, Cristian Quiroz-Moreno, et al., The microbiome of the ice-capped Cayambe Volcanic Complex in Ecuador. Frotiers in Microbioloy (link).\n2022 - Magdalena Dias, Cristian Quiroz-Moreno, et al., Soil bacterial community along an altitudinal gradient in the Sumaco, a stratovolcano in the Amazon region. Frontiers in Forest and Global Change (link).\n2022- Mallory L. Goggans, Emma A. Bilgrey, Cristian Quiroz-Moreno, et. al., Short-Term Tomato Consumption Alters the Pig Gut Microbiome toward a More Favorable Profile. Mirobiology Spectrum (link).\n2020 - Cristian Quiroz-Moreno, et. al., RGCxGC toolbox: an R-package for data processing in comprehensive two-dimensional gas chromatography-mass spectrometry. Microchemical Journal (link).\n2018 - Noroska Salazar, Cristian Quiroz-Moreno, et. al.,\nNew advances in toxicological forensic analysis using mass spectrometry techniques. Journal of Analytical Methods in Chemistry (link)."
  },
  {
    "objectID": "post/20230811_MS2extract4library/index.html",
    "href": "post/20230811_MS2extract4library/index.html",
    "title": "M2extract Part 1 - Introduction to MS2extract package",
    "section": "",
    "text": "As of today, the MS2extract package can only be found at GitHub. Therefore, you can install this pacakge by:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"CooperstoneLab/MS2extract\")",
    "crumbs": [
      "MS/MS libraries",
      "1 - MS2extract introduction"
    ]
  },
  {
    "objectID": "post/20230811_MS2extract4library/index.html#package-installation",
    "href": "post/20230811_MS2extract4library/index.html#package-installation",
    "title": "M2extract Part 1 - Introduction to MS2extract package",
    "section": "",
    "text": "As of today, the MS2extract package can only be found at GitHub. Therefore, you can install this pacakge by:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"CooperstoneLab/MS2extract\")",
    "crumbs": [
      "MS/MS libraries",
      "1 - MS2extract introduction"
    ]
  },
  {
    "objectID": "post/20230811_MS2extract4library/index.html#introduction",
    "href": "post/20230811_MS2extract4library/index.html#introduction",
    "title": "M2extract Part 1 - Introduction to MS2extract package",
    "section": "Introduction",
    "text": "Introduction\nThis vignette has the objective to introduce the MS2extract. The main goal of this package is to provide a tool to create in-house MS/MS compound libraries. Users can access a specific function help through the command help([‘function name’]). It is worth to note that this package is aimed in the targeted extraction of MS/MS scans and it is not able to perform compound match or annotation.\nA simplified workflow is presented in Figure 1. Briefly, mzMl/mzXML files are imported in memory, then based on metadata provided by the user such as analyte chemical formula, and ionization mode, MS2extract computes the theoretical precursor m/z. Then, product ion scans that matches the theoretical analyte precursor ion are extracted, with a given ppm tolerance. Next, low intensity signals, or background noise can be removed from the spectra. Finally, users can export the extracted MS/MS spectra to a MS/MS library format (.msp/.mgf) to be used as reference library for further compound identification and annotation, or deposit the created library in different repositories such as GNPS, or MassBank.\n\n\n\n\n\nFigure 1. Overview of the processing pipeline of MS2extract",
    "crumbs": [
      "MS/MS libraries",
      "1 - MS2extract introduction"
    ]
  },
  {
    "objectID": "post/20230811_MS2extract4library/index.html#basic-workflow",
    "href": "post/20230811_MS2extract4library/index.html#basic-workflow",
    "title": "M2extract Part 1 - Introduction to MS2extract package",
    "section": "Basic workflow",
    "text": "Basic workflow\nThe workflow has four main steps:\n\ndata import,\nextract MS/MS scans,\ndetect masses, and\nexport the MS/MS library\n\nIn this section, we will explain in a more detailed manner the main steps to create in-house MS/MS libraries, as well as provide information about the required and optional arguments that users may need to provide in order to effectively use this package.\nAdditionally, this package also includes a set of batch_*() functions that allows to process multiple .mzXML files at once. However, more metadata is required to run this automated pipeline and the use of this batch_*() functions will is described in the Using MS2extract Batch Pipeline.\n\nData import\nThis section is focused on describing how MS2extract package imports MS/MS data. We also include a more detailed document about this process in the Behind the curtains of importing MS/MS data vignette.\nThe main import function relies on R package metID. We adapted the import function in order to read mass spectrometry data from mzML/mzXML files. The new adaptation consists in importing scans data in a list (S3 object) rather than into a S4 object, facilitating the downstream tidy analysis of this object.\n\nThis function execute a back-end calculation of theoretical ionized m/z of the compound in order to extract the precursor ions that match that mass with a given ppm.\n\nThe arguments of the import_mzxml() functions are four:\n\nfile: mzML/mzXML file name\nmet_metadata: metadata of the analyte\nppm: error mass expressed in ppm\n…\n\n\n# Loading the package\nlibrary(MS2extract)\n\nWarning in fun(libname, pkgname): mzR has been built against a different Rcpp version (1.0.10)\nthan is installed on your system (1.0.12). This might lead to errors\nwhen loading mzR. If you encounter such issues, please send a report,\nincluding the output of sessionInfo() to the Bioc support forum at \nhttps://support.bioconductor.org/. For details see also\nhttps://github.com/sneumann/mzR/wiki/mzR-Rcpp-compiler-linker-issue.\n\n# Print function arg\nformals(import_mzxml)\n\n$file\nNULL\n\n$met_metadata\nNULL\n\n$ppm\n[1] 10\n\n$...\n\n\n\nfile\nFile should contain the name of your mzML/mzXML file that contains MS/MS data of authentic standards or reference material. Here, we provide an example file of procyanidin A2 collected in negative ionization mode, and a collision energy of 20 eV.\n\n# Importing  Procyanidin A2 MS/MS spectra in negative ionization mode\n# and 20 eV as the collision energy\nProcA2_file &lt;- system.file(\"extdata\",\n  \"ProcyanidinA2_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\n# File name\nProcA2_file\n\n[1] \"/Users/quirozmoreno.1/Library/R/arm64/4.3/library/MS2extract/extdata/ProcyanidinA2_neg_20eV.mzXML\"\n\n\n\n\nmet_metadata\nThis argument refers to the compound metadata that user need to provide in order to properly import scans that are related to the compound of interest.\nThe met_metadata is a data frame that has required and optional columns. The required columns are employed to calculate the theoretical ionized m/z for a given formula and ionization mode. In the optional columns, we have the option to provide a chromatographic region of Interest (ROI), specifying at what time the the compound elutes, in order to only keep this retention time window.\nThe required columns are:\n\nFormula: A character string specifying the metabolite formula\nIonization_mode: The ionization mode employed in data collection.\n\nThe optional columns are:\n\nmin_rt: a double with the minimum retention time to keep (in seconds)\nmax_rt: a double with the minimum retention time to keep (in seconds)\n\n\n# Procyanidin A2 metadata\nProcA2_data &lt;- data.frame(\n  Formula = \"C30H24O12\", Ionization_mode = \"Negative\",\n  min_rt = 163, max_rt = 180\n)\nProcA2_data\n\n    Formula Ionization_mode min_rt max_rt\n1 C30H24O12        Negative    163    180\n\n\n\n\nppm\nppm refers to the maximum m/z deviation from the theoretical mass. A ppm of 10 units will mean that the total allows m/z window in 20 ppm. By default, 10 ppm is used.\n\n\nimport_mzxml()\nWith all arguments explained, we can use the import_mzxml() function.\n\n# Import Procyanidin A2 data\nProcA2_raw &lt;- import_mzxml(ProcA2_file, met_metadata = ProcA2_data, ppm = 5)\n\n• Processing: ProcyanidinA2_neg_20eV.mzXML\n\n\n• Found 1 CE value: 20\n\n\n• Remember to match CE velues in spec_metadata when exporting your library\n\n\n• m/z range given 5 ppm: 575.11663 and 575.12238\n\n# 24249 rows = ions detected in all scans\ndim(ProcA2_raw)\n\n[1] 24249     6\n\n\n\n\n\nExtracting MS/MS spectra\nNow that we have the data imported, we can proceed to extract the most intense MS/MS scan.\nThis function computes the MS/MS total ion chromatogram (TIC) by summing up all intensities of the MS/MS scans, and selects the scan with the highest total intensity. It is worth noting that we only imported MS/MS scans that the precursor ion matches the theoretical m/z value of the compound provided in the previous step. Therefore, it is more accurrate to interpret this chromatogram as an EIC of the precursor ion, where only the MS/MS scans are included.\nThis function takes three arguments:\n\nspec: the imported MS/MS spectra\nverbose: a boolean, if verbose = TRUE, the MS/MS TIC and spectra is printed, if verbose = FALSE, plots are not displayed\nout_list: a boolean, if out_list = TRUE, the extracted MS/MS spectra table and plots are returned as list, otherwise only the MS/MS spectra is returned as data frame.\n\n\nProcA2_extracted &lt;- extract_MS2(ProcA2_raw, verbose = TRUE, out_list = FALSE)\n\nWarning: `position_stack()` requires non-overlapping x intervals\n\n\n\n\n\n\n\n\n\nWe generated two plots, the MS/MS EIC of the precursor ion (top plot), and the MS/MS spectra of the most intense MS/MS scan (bottom plot). In the MS/MS spectra, the blue diamond is placed on top of the precursor m/z ion. If the diamond is filled in blue, it means the precursor ion was found in the MS/MS fragmentation data, while a diamond that is not filled will represent that the precursor ion was not found in the fragmentation data.\nFurthemore, we can note that the x axis in the MS/MS spectra ranges from 0 to 1700 m/z. This is more related to the acquisition parameters used in data callection m/z range: 50-1700, which creates low intensity signal that are captured and included in the resulting MS/MS spectra.\n\nrange(ProcA2_extracted$mz)\n\n[1]  100.0852 1699.0981\n\n\nThe range of the MS/MS m/z values are from 100 to 1699 m/z, but intensities are too low to be seen in the plot.\n\n\nDetecting masses\nSimilarly to the MZmine pipeline, detecting masses refers to setting a signal intensity threshold that MS/MS ions has to meet to be kept in the data, while signals that do not meet the defined threshold are removed. This function can also normalize the spectra ion intensity to percentage based on the base peak. This is a filtering step that is based on percentage of the base peak (most intense ion).\nThe three required arguments are:\n\nspec: a data frame containing the MS/MS spectra.\nnormalize: a boolean indicating if the MS/MS spectra is normalized by the base peak before proceeding to filter out low intensity signals (normalize = TRUE), if normalize = FALSE the user has to provide the minimum ion count.\nmin_int: an integer referring to the minimum ion intensity. The value of min_int has to be in line if user decides to normalize the spectra or not. If the spectra is normalized, the min_intensity value is in percentage, otherwise the min_intensity value is expressed in ion count units.\n\nBy default, the normalization is set to TRUE and the minimum intensity is set to 1% to remove background noise.\n\nProcA2_detected &lt;- detect_mass(ProcA2_extracted, normalize = TRUE, min_int = 1)\n\nWe can see now the range of m/z values and the maximum value is 576.1221 m/z.\n\nrange(ProcA2_detected$mz)\n\n[1] 125.0243 576.1221\n\n\n\n\nMS/MS spectra plot\nWe can proceed to plot the filtered MS/MS spectra with plot_MS2spectra() function. This is a ggplot2 based function; the blue diamond refers to the precursor ion.\nIf we take a look to the previous MS/MS plot, there is less background noise in this MS/MS spectra because the low intensity ions have been removed.\n\nplot_MS2spectra(ProcA2_detected)\n\nWarning: `position_stack()` requires non-overlapping x intervals\n\n\n\n\n\n\n\n\n\n\n\nExporting MS/MS spectra\n\nNIST .msp format\nFinally after extracting the MS/MS spectra and removing background noise, we can proceed to export the MS/MS in a NIST .msp format.\nFor this task, we need extra information about the compound, such as SMILES, COLLISIONENERGY, etc. You can find the minimum required information by accessing the write_msp() function help by running the command ?write_msp.\nAn example of this table can be found at:\n\n# Reading the metadata\nmetadata_file &lt;- system.file(\"extdata\",\n  \"msp_metadata.csv\",\n  package = \"MS2extract\"\n)\n\nmetadata &lt;- read.csv(metadata_file)\ndplyr::glimpse(metadata)\n\nRows: 1\nColumns: 8\n$ NAME            &lt;chr&gt; \"Procyanidin A2\"\n$ PRECURSORTYPE   &lt;chr&gt; \"[M-H]-\"\n$ FORMULA         &lt;chr&gt; \"C30H24O12\"\n$ INCHIKEY        &lt;chr&gt; \"NSEWTSAADLNHNH-LSBOWGMISA-N\"\n$ SMILES          &lt;chr&gt; \"C1C(C(OC2=C1C(=CC3=C2C4C(C(O3)(OC5=CC(=CC(=C45)O)O)C6…\n$ IONMODE         &lt;chr&gt; \"Negative\"\n$ INSTRUMENTTYPE  &lt;chr&gt; \"LC-ESI-QTOF\"\n$ COLLISIONENERGY &lt;chr&gt; \"20 eV\"\n\n\nThe three arguments for this function are:\n\nspec: a data frame containing the extracted MS/MS spectra\nspec_metadata: a data frame containing the values to be including in the resulting .msp file\nmsp_name: a string with the name of the msp file not containing (.msp) extension\n\n\nwrite_msp(\n  spec = ProcA2_detected,\n  spec_metadata = metadata,\n  msp_name = \"Procyanidin_A2\"\n)\n\nAfter writing the msp file, you will see the following file content:\n\n\n• Filtering MS/MS scans for 20 CE\n\n\nNAME: Procyanidin A2\nPRECURSORMZ: 575.11957\nPRECURSORTYPE: [M-H]-\nFORMULA: C30H24O12\nRETENTIONTIME: 2.844\nIONMODE: Negative\nCOMMENT: Spectra extracted with MS2extract R package\nINCHIKEY: NSEWTSAADLNHNH-LSBOWGMISA-N\nSMILES: C1C(C(OC2=C1C(=CC3=C2C4C(C(O3)(OC5=CC(=CC(=C45)O)O)C6=CC(=C(C=C6)O)O)O)O)C7=CC(=C(C=C7)O)O)O\nCCS: \nCOLLISIONENERGY: 20 eV\nINSTRUMENTTYPE: LC-ESI-QTOF\nNum Peaks: 38\n125.02431 10\n137.02441 3\n161.02449 2\n163.00355 3\n165.01881 2\n217.04996 2\n241.05002 2\n245.04547 2\n245.0817 2\n257.0451 2\n285.04063 62\n286.04387 4\n287.05579 7\n289.0718 48\n290.07495 3\n297.03993 4\n307.06114 2\n313.03573 2\n327.05044 7\n407.07693 16\n408.08161 2\n411.07227 9\n423.07231 53\n424.07537 5\n435.07138 3\n447.07296 5\n449.08799 51\n450.09044 6\n452.07453 15\n453.08155 7\n471.1086 2\n513.11796 2\n531.13006 2\n539.09834 22\n540.10156 3\n557.10809 5\n575.11968 100\n576.12208 13",
    "crumbs": [
      "MS/MS libraries",
      "1 - MS2extract introduction"
    ]
  },
  {
    "objectID": "post/20230811_MS2extract4library/index.html#session-info",
    "href": "post/20230811_MS2extract4library/index.html#session-info",
    "title": "M2extract Part 1 - Introduction to MS2extract package",
    "section": "Session info",
    "text": "Session info\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] MS2extract_0.01.0\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0      farver_2.1.1          dplyr_1.1.4          \n [4] fastmap_1.1.1         XML_3.99-0.14         digest_0.6.33        \n [7] lifecycle_1.0.4       cluster_2.1.4         ProtGenerics_1.32.0  \n[10] magrittr_2.0.3        compiler_4.3.1        rlang_1.1.3          \n[13] tools_4.3.1           utf8_1.2.4            yaml_2.3.8           \n[16] knitr_1.45            ggsignif_0.6.4        labeling_0.4.3       \n[19] htmlwidgets_1.6.4     plyr_1.8.9            abind_1.4-5          \n[22] BiocParallel_1.34.2   withr_2.5.2           purrr_1.0.2          \n[25] BiocGenerics_0.48.1   grid_4.3.1            stats4_4.3.1         \n[28] preprocessCore_1.62.1 fansi_1.0.6           ggpubr_0.6.0         \n[31] colorspace_2.1-0      ggplot2_3.4.4         scales_1.3.0         \n[34] iterators_1.0.14      MASS_7.3-60           cli_3.6.2            \n[37] mzR_2.34.1            rmarkdown_2.25        generics_0.1.3       \n[40] Rdisop_1.60.0         tzdb_0.4.0            readxl_1.4.3         \n[43] ncdf4_1.21            affy_1.78.2           zlibbioc_1.46.0      \n[46] parallel_4.3.1        impute_1.74.1         cellranger_1.1.0     \n[49] BiocManager_1.30.22   vsn_3.68.0            vctrs_0.6.5          \n[52] jsonlite_1.8.8        carData_3.0-5         car_3.1-2            \n[55] hms_1.1.3             IRanges_2.34.1        S4Vectors_0.38.2     \n[58] MALDIquant_1.22.1     rstatix_0.7.2         ggrepel_0.9.4        \n[61] clue_0.3-65           foreach_1.5.2         limma_3.56.2         \n[64] tidyr_1.3.0           affyio_1.70.0         glue_1.7.0           \n[67] MSnbase_2.26.0        codetools_0.2-19      cowplot_1.1.1        \n[70] gtable_0.3.4          OrgMassSpecR_0.5-3    mzID_1.38.0          \n[73] munsell_0.5.0         tibble_3.2.1          pillar_1.9.0         \n[76] pcaMethods_1.92.0     htmltools_0.5.7       R6_2.5.1             \n[79] Rdpack_2.6            doParallel_1.0.17     evaluate_0.23        \n[82] lattice_0.21-8        Biobase_2.62.0        readr_2.1.4          \n[85] rbibutils_2.2.16      backports_1.4.1       broom_1.0.5          \n[88] Rcpp_1.0.12           xfun_0.41             MsCoreUtils_1.12.0   \n[91] pkgconfig_2.0.3",
    "crumbs": [
      "MS/MS libraries",
      "1 - MS2extract introduction"
    ]
  },
  {
    "objectID": "post/20230928_MSextract_batch/index.html",
    "href": "post/20230928_MSextract_batch/index.html",
    "title": "MS2extract Part 2 - Using the MS2extract batch pipeline",
    "section": "",
    "text": "In the previous tutorial Introduction to MS2extract package, we described in a detailed manner the core functions of the package. If you are starting to use the MS2extract package with this tutorial, we encourage you to take a look at this tutorial first.\nOnce you are familiar with the core workflow and functions of this package, we can dive into an automated pipeline with the proposed batch_*() functions. If you find that you want to extract many MS/MS spectra at once, you will want to use thesebatch_*() functions\nThe first three main steps have a separate batch_*() alternative functions; importing mzXML files, extracting MS/MS spectra, and detecting masses. However, exporting your library to a .msp file is able to detect if the provided spectra comes from a single or multiple .mzXML file, so the same function works in both cases.\n\n\n\n\n\nFigure 1. Overview of general data processing pipeline to extract MS/MS spectra using the MS2extract package\n\n\n\n\n\n\nWe are familiar with the arguments that the core functions accept, here in this section we describe extra arguments that specific batch_*() functions require.\n\n\n\n\nknitr::opts_chunk$set(warning = FALSE)\nlibrary(MS2extract)\n#&gt; Warning in fun(libname, pkgname): mzR has been built against a different Rcpp version (1.0.10)\n#&gt; than is installed on your system (1.0.12). This might lead to errors\n#&gt; when loading mzR. If you encounter such issues, please send a report,\n#&gt; including the output of sessionInfo() to the Bioc support forum at \n#&gt; https://support.bioconductor.org/. For details see also\n#&gt; https://github.com/sneumann/mzR/wiki/mzR-Rcpp-compiler-linker-issue.\n\nSimilarly to import_mzxml(), we need to provide compound metadata, with at minimum the compound name, formula, ionization mode, and optionally (but recommended) the region of interest (min_rt and max_rt).\n\n# Select the csv file name and path\nbatch_file &lt;- system.file(\"extdata\", \"batch_read.csv\",\n  package = \"MS2extract\"\n)\n# Read the data frame\nbatch_data &lt;- read.csv(batch_file)\n\n# File paths for Procyanidin A2 and Rutin\nProcA2_file &lt;- system.file(\"extdata\",\n  \"ProcyanidinA2_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\nRutin_file &lt;- system.file(\"extdata\",\n  \"Rutin_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\n\n# Add file path - User should specified the file path -\nbatch_data$File &lt;- c(ProcA2_file, Rutin_file)\n\n# Checking batch_data data frame\ndplyr::glimpse(batch_data)\n#&gt; Rows: 2\n#&gt; Columns: 7\n#&gt; $ Name            &lt;chr&gt; \"Procyanidin A2\", \"Rutin\"\n#&gt; $ Formula         &lt;chr&gt; \"C30H24O12\", \"C27H30O16\"\n#&gt; $ Ionization_mode &lt;chr&gt; \"Negative\", \"Negative\"\n#&gt; $ min_rt          &lt;int&gt; 163, 162\n#&gt; $ max_rt          &lt;int&gt; 180, 171\n#&gt; $ COLLISIONENERGY &lt;chr&gt; \" 20 eV\", \" 20 eV\"\n#&gt; $ File            &lt;chr&gt; \"/Users/quirozmoreno.1/Library/R/arm64/4.3/library/MS2…\n\nThe only difference between batch_import_mzxml() and import_mzxml() is that met_metadata can be more than one row. Here we are working with two compounds, procyanidin A2 and rutin.\n\nTip: you can extract multiple compounds from the same .mzXML if they have different precursor ion m/z.\n\n\nTip: you can also specify multiple compounds that have the same m/z as long as they have different retention time.\n\n\nbatch_compounds &lt;- batch_import_mzxml(batch_data)\n#&gt; \n#&gt; ── Begining batch import ───────────────────────────────────────────────────────\n#&gt; \n#&gt; ── -- ──\n#&gt; \n#&gt; • Processing: ProcyanidinA2_neg_20eV.mzXML\n#&gt; • Found 1 CE value: 20\n#&gt; • Remember to match CE velues in spec_metadata when exporting your library\n#&gt; • m/z range given 10 ppm: 575.11376 and 575.12526\n#&gt; • Compound name: Procyanidin A2. 20 eV\n#&gt; \n#&gt; ── -- ──\n#&gt; \n#&gt; • Processing: Rutin_neg_20eV.mzXML\n#&gt; • Found 1 CE value: 20\n#&gt; • Remember to match CE velues in spec_metadata when exporting your library\n#&gt; • m/z range given 10 ppm: 609.14002 and 609.15221\n#&gt; • Compound name: Rutin. 20 eV\n#&gt; \n#&gt; ── End batch import ────────────────────────────────────────────────────────────\n\nThe raw mzXML data contains:\n\nProcyanidin A2: 24249 ions\nRutin: 22096 ions\n\n\n# Checking dimension by compound\npurrr::map(batch_compounds, dim)\n#&gt; $`Procyanidin A2. 20 eV`\n#&gt; [1] 24249     6\n#&gt; \n#&gt; $`Rutin. 20 eV`\n#&gt; [1] 22096     6\n\n\n\nNow that we have our data in imported, we can proceed to extract the most intense MS/MS scan for each compound. In this case, the batch_extract_MS2() functions do not have extra arguments, although most of the arguments remains fairly similar.\n\n# Use extract batch extract_MS2\nbatch_extracted &lt;- batch_extract_MS2(batch_compounds,\n  verbose = TRUE,\n  out_list = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy using verbose = TRUE, we can display the MS/MS TIC plot as well the raw MS/MS spectra.\n\n\n\nNow that we have the raw MS/MS spectra, we are going to remove background noise/non-informative product ions based on intensity. batch_detect_mass() has the same arguments than its core analogue.\n\nbatch_mass_detected &lt;- batch_detect_mass(batch_extracted, # Compound list\n  normalize = TRUE, # Normalize\n  min_int = 1\n) # Minimum intensity\n\npurrr::map(batch_mass_detected, dim)\n#&gt; $`Procyanidin A2. 20 eV`\n#&gt; [1] 38  6\n#&gt; \n#&gt; $`Rutin. 20 eV`\n#&gt; [1] 4 6\n\nWe see a decrease of number of ions, 38 and 4 ions for procyanidin A2 and rutin, respectively.\n\n\n\nplot_MS2spectra(batch_mass_detected, \"Procyanidin A2. 20 eV\")\n\n\n\n\n\n\n\n\n\n\n\n\nplot_MS2spectra(batch_mass_detected, \"Rutin. 20 eV\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn contrast with the previous batch functions, write_msp() is able to detect if the user is providing a single spectra or multiple spectra. However, the user needs to provide metadata about each compound to be included in the resulting .msp database.\n\n# Reading batch metadata\nmetadata_msp_file &lt;- system.file(\"extdata\",\n  \"batch_msp_metadata.csv\",\n  package = \"MS2extract\"\n)\n\nmetadata_msp &lt;- read.csv(metadata_msp_file)\n\ndplyr::glimpse(metadata_msp)\n#&gt; Rows: 2\n#&gt; Columns: 8\n#&gt; $ NAME            &lt;chr&gt; \"Procyanidin A2\", \"Rutin\"\n#&gt; $ PRECURSORTYPE   &lt;chr&gt; \"[M-H]-\", \"[M-H]-\"\n#&gt; $ FORMULA         &lt;chr&gt; \"C30H24O12\", \"C27H30O16\"\n#&gt; $ INCHIKEY        &lt;chr&gt; \"NSEWTSAADLNHNH-LSBOWGMISA-N\", \"IKGXIBQEEMLURG-NVPNHPE…\n#&gt; $ SMILES          &lt;chr&gt; \"C1C(C(OC2=C1C(=CC3=C2C4C(C(O3)(OC5=CC(=CC(=C45)O)O)C6…\n#&gt; $ IONMODE         &lt;chr&gt; \"Negative\", \"Negative\"\n#&gt; $ INSTRUMENTTYPE  &lt;chr&gt; \"LC-ESI-QTOF\", \"LC-ESI-QTOF\"\n#&gt; $ COLLISIONENERGY &lt;chr&gt; \"20 eV\", \"20 eV\"\n\nAfter having the cleaned MS/MS spectra and the compound metadata, we can proceed to export them into a .msp file.\n\nwrite_msp(\n  spec = batch_mass_detected,\n  spec_metadata = metadata_msp,\n  msp_name = \"ProcA2_Rutin_batch.msp\"\n)",
    "crumbs": [
      "MS/MS libraries",
      "2 - MS2extract batch processing"
    ]
  },
  {
    "objectID": "post/20230928_MSextract_batch/index.html#introduction",
    "href": "post/20230928_MSextract_batch/index.html#introduction",
    "title": "MS2extract Part 2 - Using the MS2extract batch pipeline",
    "section": "",
    "text": "In the previous tutorial Introduction to MS2extract package, we described in a detailed manner the core functions of the package. If you are starting to use the MS2extract package with this tutorial, we encourage you to take a look at this tutorial first.\nOnce you are familiar with the core workflow and functions of this package, we can dive into an automated pipeline with the proposed batch_*() functions. If you find that you want to extract many MS/MS spectra at once, you will want to use thesebatch_*() functions\nThe first three main steps have a separate batch_*() alternative functions; importing mzXML files, extracting MS/MS spectra, and detecting masses. However, exporting your library to a .msp file is able to detect if the provided spectra comes from a single or multiple .mzXML file, so the same function works in both cases.\n\n\n\n\n\nFigure 1. Overview of general data processing pipeline to extract MS/MS spectra using the MS2extract package\n\n\n\n\n\n\nWe are familiar with the arguments that the core functions accept, here in this section we describe extra arguments that specific batch_*() functions require.\n\n\n\n\nknitr::opts_chunk$set(warning = FALSE)\nlibrary(MS2extract)\n#&gt; Warning in fun(libname, pkgname): mzR has been built against a different Rcpp version (1.0.10)\n#&gt; than is installed on your system (1.0.12). This might lead to errors\n#&gt; when loading mzR. If you encounter such issues, please send a report,\n#&gt; including the output of sessionInfo() to the Bioc support forum at \n#&gt; https://support.bioconductor.org/. For details see also\n#&gt; https://github.com/sneumann/mzR/wiki/mzR-Rcpp-compiler-linker-issue.\n\nSimilarly to import_mzxml(), we need to provide compound metadata, with at minimum the compound name, formula, ionization mode, and optionally (but recommended) the region of interest (min_rt and max_rt).\n\n# Select the csv file name and path\nbatch_file &lt;- system.file(\"extdata\", \"batch_read.csv\",\n  package = \"MS2extract\"\n)\n# Read the data frame\nbatch_data &lt;- read.csv(batch_file)\n\n# File paths for Procyanidin A2 and Rutin\nProcA2_file &lt;- system.file(\"extdata\",\n  \"ProcyanidinA2_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\nRutin_file &lt;- system.file(\"extdata\",\n  \"Rutin_neg_20eV.mzXML\",\n  package = \"MS2extract\"\n)\n\n# Add file path - User should specified the file path -\nbatch_data$File &lt;- c(ProcA2_file, Rutin_file)\n\n# Checking batch_data data frame\ndplyr::glimpse(batch_data)\n#&gt; Rows: 2\n#&gt; Columns: 7\n#&gt; $ Name            &lt;chr&gt; \"Procyanidin A2\", \"Rutin\"\n#&gt; $ Formula         &lt;chr&gt; \"C30H24O12\", \"C27H30O16\"\n#&gt; $ Ionization_mode &lt;chr&gt; \"Negative\", \"Negative\"\n#&gt; $ min_rt          &lt;int&gt; 163, 162\n#&gt; $ max_rt          &lt;int&gt; 180, 171\n#&gt; $ COLLISIONENERGY &lt;chr&gt; \" 20 eV\", \" 20 eV\"\n#&gt; $ File            &lt;chr&gt; \"/Users/quirozmoreno.1/Library/R/arm64/4.3/library/MS2…\n\nThe only difference between batch_import_mzxml() and import_mzxml() is that met_metadata can be more than one row. Here we are working with two compounds, procyanidin A2 and rutin.\n\nTip: you can extract multiple compounds from the same .mzXML if they have different precursor ion m/z.\n\n\nTip: you can also specify multiple compounds that have the same m/z as long as they have different retention time.\n\n\nbatch_compounds &lt;- batch_import_mzxml(batch_data)\n#&gt; \n#&gt; ── Begining batch import ───────────────────────────────────────────────────────\n#&gt; \n#&gt; ── -- ──\n#&gt; \n#&gt; • Processing: ProcyanidinA2_neg_20eV.mzXML\n#&gt; • Found 1 CE value: 20\n#&gt; • Remember to match CE velues in spec_metadata when exporting your library\n#&gt; • m/z range given 10 ppm: 575.11376 and 575.12526\n#&gt; • Compound name: Procyanidin A2. 20 eV\n#&gt; \n#&gt; ── -- ──\n#&gt; \n#&gt; • Processing: Rutin_neg_20eV.mzXML\n#&gt; • Found 1 CE value: 20\n#&gt; • Remember to match CE velues in spec_metadata when exporting your library\n#&gt; • m/z range given 10 ppm: 609.14002 and 609.15221\n#&gt; • Compound name: Rutin. 20 eV\n#&gt; \n#&gt; ── End batch import ────────────────────────────────────────────────────────────\n\nThe raw mzXML data contains:\n\nProcyanidin A2: 24249 ions\nRutin: 22096 ions\n\n\n# Checking dimension by compound\npurrr::map(batch_compounds, dim)\n#&gt; $`Procyanidin A2. 20 eV`\n#&gt; [1] 24249     6\n#&gt; \n#&gt; $`Rutin. 20 eV`\n#&gt; [1] 22096     6\n\n\n\nNow that we have our data in imported, we can proceed to extract the most intense MS/MS scan for each compound. In this case, the batch_extract_MS2() functions do not have extra arguments, although most of the arguments remains fairly similar.\n\n# Use extract batch extract_MS2\nbatch_extracted &lt;- batch_extract_MS2(batch_compounds,\n  verbose = TRUE,\n  out_list = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy using verbose = TRUE, we can display the MS/MS TIC plot as well the raw MS/MS spectra.\n\n\n\nNow that we have the raw MS/MS spectra, we are going to remove background noise/non-informative product ions based on intensity. batch_detect_mass() has the same arguments than its core analogue.\n\nbatch_mass_detected &lt;- batch_detect_mass(batch_extracted, # Compound list\n  normalize = TRUE, # Normalize\n  min_int = 1\n) # Minimum intensity\n\npurrr::map(batch_mass_detected, dim)\n#&gt; $`Procyanidin A2. 20 eV`\n#&gt; [1] 38  6\n#&gt; \n#&gt; $`Rutin. 20 eV`\n#&gt; [1] 4 6\n\nWe see a decrease of number of ions, 38 and 4 ions for procyanidin A2 and rutin, respectively.\n\n\n\nplot_MS2spectra(batch_mass_detected, \"Procyanidin A2. 20 eV\")\n\n\n\n\n\n\n\n\n\n\n\n\nplot_MS2spectra(batch_mass_detected, \"Rutin. 20 eV\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn contrast with the previous batch functions, write_msp() is able to detect if the user is providing a single spectra or multiple spectra. However, the user needs to provide metadata about each compound to be included in the resulting .msp database.\n\n# Reading batch metadata\nmetadata_msp_file &lt;- system.file(\"extdata\",\n  \"batch_msp_metadata.csv\",\n  package = \"MS2extract\"\n)\n\nmetadata_msp &lt;- read.csv(metadata_msp_file)\n\ndplyr::glimpse(metadata_msp)\n#&gt; Rows: 2\n#&gt; Columns: 8\n#&gt; $ NAME            &lt;chr&gt; \"Procyanidin A2\", \"Rutin\"\n#&gt; $ PRECURSORTYPE   &lt;chr&gt; \"[M-H]-\", \"[M-H]-\"\n#&gt; $ FORMULA         &lt;chr&gt; \"C30H24O12\", \"C27H30O16\"\n#&gt; $ INCHIKEY        &lt;chr&gt; \"NSEWTSAADLNHNH-LSBOWGMISA-N\", \"IKGXIBQEEMLURG-NVPNHPE…\n#&gt; $ SMILES          &lt;chr&gt; \"C1C(C(OC2=C1C(=CC3=C2C4C(C(O3)(OC5=CC(=CC(=C45)O)O)C6…\n#&gt; $ IONMODE         &lt;chr&gt; \"Negative\", \"Negative\"\n#&gt; $ INSTRUMENTTYPE  &lt;chr&gt; \"LC-ESI-QTOF\", \"LC-ESI-QTOF\"\n#&gt; $ COLLISIONENERGY &lt;chr&gt; \"20 eV\", \"20 eV\"\n\nAfter having the cleaned MS/MS spectra and the compound metadata, we can proceed to export them into a .msp file.\n\nwrite_msp(\n  spec = batch_mass_detected,\n  spec_metadata = metadata_msp,\n  msp_name = \"ProcA2_Rutin_batch.msp\"\n)",
    "crumbs": [
      "MS/MS libraries",
      "2 - MS2extract batch processing"
    ]
  },
  {
    "objectID": "post/20230928_MSextract_batch/index.html#session-info",
    "href": "post/20230928_MSextract_batch/index.html#session-info",
    "title": "MS2extract Part 2 - Using the MS2extract batch pipeline",
    "section": "Session info",
    "text": "Session info\n\nsessionInfo()\n#&gt; R version 4.3.1 (2023-06-16)\n#&gt; Platform: aarch64-apple-darwin20 (64-bit)\n#&gt; Running under: macOS Sonoma 14.3\n#&gt; \n#&gt; Matrix products: default\n#&gt; BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n#&gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n#&gt; \n#&gt; locale:\n#&gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#&gt; \n#&gt; time zone: America/New_York\n#&gt; tzcode source: internal\n#&gt; \n#&gt; attached base packages:\n#&gt; [1] stats     graphics  grDevices utils     datasets  methods   base     \n#&gt; \n#&gt; other attached packages:\n#&gt; [1] MS2extract_0.01.0\n#&gt; \n#&gt; loaded via a namespace (and not attached):\n#&gt;  [1] tidyselect_1.2.0      farver_2.1.1          dplyr_1.1.4          \n#&gt;  [4] fastmap_1.1.1         XML_3.99-0.14         digest_0.6.33        \n#&gt;  [7] lifecycle_1.0.4       cluster_2.1.4         ProtGenerics_1.32.0  \n#&gt; [10] magrittr_2.0.3        compiler_4.3.1        rlang_1.1.3          \n#&gt; [13] tools_4.3.1           utf8_1.2.4            yaml_2.3.8           \n#&gt; [16] knitr_1.45            ggsignif_0.6.4        labeling_0.4.3       \n#&gt; [19] htmlwidgets_1.6.4     plyr_1.8.9            abind_1.4-5          \n#&gt; [22] BiocParallel_1.34.2   withr_2.5.2           purrr_1.0.2          \n#&gt; [25] BiocGenerics_0.48.1   grid_4.3.1            stats4_4.3.1         \n#&gt; [28] preprocessCore_1.62.1 fansi_1.0.6           ggpubr_0.6.0         \n#&gt; [31] colorspace_2.1-0      ggplot2_3.4.4         scales_1.3.0         \n#&gt; [34] iterators_1.0.14      MASS_7.3-60           cli_3.6.2            \n#&gt; [37] mzR_2.34.1            rmarkdown_2.25        generics_0.1.3       \n#&gt; [40] Rdisop_1.60.0         tzdb_0.4.0            readxl_1.4.3         \n#&gt; [43] ncdf4_1.21            affy_1.78.2           zlibbioc_1.46.0      \n#&gt; [46] parallel_4.3.1        impute_1.74.1         cellranger_1.1.0     \n#&gt; [49] BiocManager_1.30.22   vsn_3.68.0            vctrs_0.6.5          \n#&gt; [52] jsonlite_1.8.8        carData_3.0-5         car_3.1-2            \n#&gt; [55] hms_1.1.3             IRanges_2.34.1        S4Vectors_0.38.2     \n#&gt; [58] MALDIquant_1.22.1     rstatix_0.7.2         ggrepel_0.9.4        \n#&gt; [61] clue_0.3-65           foreach_1.5.2         limma_3.56.2         \n#&gt; [64] tidyr_1.3.0           affyio_1.70.0         glue_1.7.0           \n#&gt; [67] MSnbase_2.26.0        codetools_0.2-19      cowplot_1.1.1        \n#&gt; [70] gtable_0.3.4          OrgMassSpecR_0.5-3    mzID_1.38.0          \n#&gt; [73] munsell_0.5.0         tibble_3.2.1          pillar_1.9.0         \n#&gt; [76] pcaMethods_1.92.0     htmltools_0.5.7       R6_2.5.1             \n#&gt; [79] Rdpack_2.6            doParallel_1.0.17     evaluate_0.23        \n#&gt; [82] lattice_0.21-8        Biobase_2.62.0        readr_2.1.4          \n#&gt; [85] rbibutils_2.2.16      backports_1.4.1       broom_1.0.5          \n#&gt; [88] Rcpp_1.0.12           xfun_0.41             MsCoreUtils_1.12.0   \n#&gt; [91] pkgconfig_2.0.3",
    "crumbs": [
      "MS/MS libraries",
      "2 - MS2extract batch processing"
    ]
  }
]